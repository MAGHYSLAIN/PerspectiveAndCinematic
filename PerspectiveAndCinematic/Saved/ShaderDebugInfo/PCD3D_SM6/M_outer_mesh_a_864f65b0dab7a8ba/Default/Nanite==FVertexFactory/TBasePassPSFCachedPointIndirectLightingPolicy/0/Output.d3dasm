;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; PACKED_VIEW_INDEX        0   x           0     NONE    uint       
; MACRO_TILE_INDEX         0    y          0     NONE    uint       
; SV_IsFrontFace           0     z         0    FFACE    uint       
; SV_Position              0   xyzw        1      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                4   xyzw        4   TARGET   float   xyzw
; SV_Target                6   xyzw        6   TARGET   float   xyzw
;
; shader hash: d412adea65cd077484123068b1ff0464
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; PACKED_VIEW_INDEX        0        nointerpolation       
; MACRO_TILE_INDEX         0        nointerpolation       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                4                              
; SV_Target                6                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_IndirectLightingCache
; {
;
;   struct UniformBufferConstants_IndirectLightingCache
;   {
;
;       float3 IndirectLightingCache_IndirectLightingCachePrimitiveAdd;; Offset:    0
;       float PrePadding_IndirectLightingCache_12;    ; Offset:   12
;       float3 IndirectLightingCache_IndirectLightingCachePrimitiveScale;; Offset:   16
;       float PrePadding_IndirectLightingCache_28;    ; Offset:   28
;       float3 IndirectLightingCache_IndirectLightingCacheMinUV;; Offset:   32
;       float PrePadding_IndirectLightingCache_44;    ; Offset:   44
;       float3 IndirectLightingCache_IndirectLightingCacheMaxUV;; Offset:   48
;       float PrePadding_IndirectLightingCache_60;    ; Offset:   60
;       float4 IndirectLightingCache_PointSkyBentNormal;; Offset:   64
;       float IndirectLightingCache_DirectionalLightShadowing;; Offset:   80
;       float PrePadding_IndirectLightingCache_84;    ; Offset:   84
;       float PrePadding_IndirectLightingCache_88;    ; Offset:   88
;       float PrePadding_IndirectLightingCache_92;    ; Offset:   92
;       float4 IndirectLightingCache_IndirectLightingSHCoefficients0[3];; Offset:   96
;       float4 IndirectLightingCache_IndirectLightingSHCoefficients1[3];; Offset:  144
;       float4 IndirectLightingCache_IndirectLightingSHCoefficients2;; Offset:  192
;       float4 IndirectLightingCache_IndirectLightingSHSingleCoefficient;; Offset:  208
;       uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture0;; Offset:  224
;       uint PrePadding_IndirectLightingCache_228;    ; Offset:  228
;       uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture1;; Offset:  232
;       uint PrePadding_IndirectLightingCache_236;    ; Offset:  236
;       uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture2;; Offset:  240
;       uint PrePadding_IndirectLightingCache_244;    ; Offset:  244
;       uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler0;; Offset:  248
;       uint PrePadding_IndirectLightingCache_252;    ; Offset:  252
;       uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler1;; Offset:  256
;       uint PrePadding_IndirectLightingCache_260;    ; Offset:  260
;       uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler2;; Offset:  264
;   
;   } UniformBufferConstants_IndirectLightingCache;   ; Offset:    0 Size:   268
;
; }
;
; cbuffer UniformBufferConstants_Nanite
; {
;
;   struct UniformBufferConstants_Nanite
;   {
;
;       int4 Nanite_PageConstants;                    ; Offset:    0
;       int4 Nanite_MaterialConfig;                   ; Offset:   16
;       uint Nanite_MaxNodes;                         ; Offset:   32
;       uint Nanite_MaxVisibleClusters;               ; Offset:   36
;       uint Nanite_RenderFlags;                      ; Offset:   40
;       float Nanite_RayTracingCutError;              ; Offset:   44
;       float4 Nanite_RectScaleOffset;                ; Offset:   48
;       uint BindlessResource_Nanite_ClusterPageData; ; Offset:   64
;       uint PrePadding_Nanite_68;                    ; Offset:   68
;       uint BindlessResource_Nanite_VisibleClustersSWHW;; Offset:   72
;       uint PrePadding_Nanite_76;                    ; Offset:   76
;       uint BindlessResource_Nanite_HierarchyBuffer; ; Offset:   80
;       uint PrePadding_Nanite_84;                    ; Offset:   84
;       uint BindlessResource_Nanite_MaterialTileRemap;; Offset:   88
;       uint PrePadding_Nanite_92;                    ; Offset:   92
;       uint BindlessResource_Nanite_MaterialDepthTable;; Offset:   96
;       uint PrePadding_Nanite_100;                   ; Offset:  100
;       uint BindlessResource_Nanite_MaterialResolve; ; Offset:  104
;       uint PrePadding_Nanite_108;                   ; Offset:  108
;       uint BindlessResource_Nanite_VisBuffer64;     ; Offset:  112
;       uint PrePadding_Nanite_116;                   ; Offset:  116
;       uint BindlessResource_Nanite_DbgBuffer64;     ; Offset:  120
;       uint PrePadding_Nanite_124;                   ; Offset:  124
;       uint BindlessResource_Nanite_DbgBuffer32;     ; Offset:  128
;       uint PrePadding_Nanite_132;                   ; Offset:  132
;       uint BindlessResource_Nanite_ShadingRate;     ; Offset:  136
;       uint PrePadding_Nanite_140;                   ; Offset:  140
;       uint BindlessResource_Nanite_RayTracingDataBuffer;; Offset:  144
;       uint PrePadding_Nanite_148;                   ; Offset:  148
;       uint Nanite_MultiViewEnabled;                 ; Offset:  152
;       uint PrePadding_Nanite_156;                   ; Offset:  156
;       uint BindlessResource_Nanite_MultiViewIndices;; Offset:  160
;       uint PrePadding_Nanite_164;                   ; Offset:  164
;       uint BindlessResource_Nanite_MultiViewRectScaleOffsets;; Offset:  168
;       uint PrePadding_Nanite_172;                   ; Offset:  172
;       uint BindlessResource_Nanite_InViews;         ; Offset:  176
;   
;   } UniformBufferConstants_Nanite;                  ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[6];           ; Offset:    0
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:   96
;       uint PrePadding_Material_100;                 ; Offset:  100
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  104
;       uint PrePadding_Material_108;                 ; Offset:  108
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  112
;       uint PrePadding_Material_116;                 ; Offset:  116
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  120
;       uint PrePadding_Material_124;                 ; Offset:  124
;       uint BindlessResource_Material_Texture2D_2;   ; Offset:  128
;       uint PrePadding_Material_132;                 ; Offset:  132
;       uint BindlessSampler_Material_Texture2D_2Sampler;; Offset:  136
;       uint PrePadding_Material_140;                 ; Offset:  140
;       uint BindlessResource_Material_Texture2D_3;   ; Offset:  144
;       uint PrePadding_Material_148;                 ; Offset:  148
;       uint BindlessSampler_Material_Texture2D_3Sampler;; Offset:  152
;       uint PrePadding_Material_156;                 ; Offset:  156
;       uint BindlessResource_Material_Texture2D_4;   ; Offset:  160
;       uint PrePadding_Material_164;                 ; Offset:  164
;       uint BindlessSampler_Material_Texture2D_4Sampler;; Offset:  168
;       uint PrePadding_Material_172;                 ; Offset:  172
;       uint BindlessResource_Material_Texture2D_5;   ; Offset:  176
;       uint PrePadding_Material_180;                 ; Offset:  180
;       uint BindlessSampler_Material_Texture2D_5Sampler;; Offset:  184
;       uint PrePadding_Material_188;                 ; Offset:  188
;       uint BindlessResource_Material_Texture2D_6;   ; Offset:  192
;       uint PrePadding_Material_196;                 ; Offset:  196
;       uint BindlessSampler_Material_Texture2D_6Sampler;; Offset:  200
;       uint PrePadding_Material_204;                 ; Offset:  204
;       uint BindlessResource_Material_Texture2D_7;   ; Offset:  208
;       uint PrePadding_Material_212;                 ; Offset:  212
;       uint BindlessSampler_Material_Texture2D_7Sampler;; Offset:  216
;       uint PrePadding_Material_220;                 ; Offset:  220
;       uint BindlessResource_Material_Texture2D_8;   ; Offset:  224
;       uint PrePadding_Material_228;                 ; Offset:  228
;       uint BindlessSampler_Material_Texture2D_8Sampler;; Offset:  232
;       uint PrePadding_Material_236;                 ; Offset:  236
;       uint BindlessResource_Material_Texture2D_9;   ; Offset:  240
;       uint PrePadding_Material_244;                 ; Offset:  244
;       uint BindlessSampler_Material_Texture2D_9Sampler;; Offset:  248
;       uint PrePadding_Material_252;                 ; Offset:  252
;       uint BindlessResource_Material_Texture2D_10;  ; Offset:  256
;       uint PrePadding_Material_260;                 ; Offset:  260
;       uint BindlessSampler_Material_Texture2D_10Sampler;; Offset:  264
;       uint PrePadding_Material_268;                 ; Offset:  268
;       uint BindlessResource_Material_Texture2D_11;  ; Offset:  272
;       uint PrePadding_Material_276;                 ; Offset:  276
;       uint BindlessSampler_Material_Texture2D_11Sampler;; Offset:  280
;       uint PrePadding_Material_284;                 ; Offset:  284
;       uint BindlessResource_Material_Texture2D_12;  ; Offset:  288
;       uint PrePadding_Material_292;                 ; Offset:  292
;       uint BindlessSampler_Material_Texture2D_12Sampler;; Offset:  296
;       uint PrePadding_Material_300;                 ; Offset:  300
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  304
;       uint PrePadding_Material_308;                 ; Offset:  308
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  312
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   316
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_IndirectLightingCache   cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Nanite     cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S1             s1     1
; OpaqueBasePass_DBufferBTextureSampler   sampler      NA          NA      S2             s2     1
; OpaqueBasePass_DBufferCTextureSampler   sampler      NA          NA      S3             s3     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S5             s5     1
; Material_Texture2D_2Sampler       sampler      NA          NA      S6             s6     1
; Material_Texture2D_3Sampler       sampler      NA          NA      S7             s7     1
; Material_Texture2D_4Sampler       sampler      NA          NA      S8             s8     1
; Material_Texture2D_5Sampler       sampler      NA          NA      S9             s9     1
; Material_Texture2D_6Sampler       sampler      NA          NA     S10            s10     1
; Material_Texture2D_7Sampler       sampler      NA          NA     S11            s11     1
; Material_Texture2D_8Sampler       sampler      NA          NA     S12            s12     1
; Material_Texture2D_9Sampler       sampler      NA          NA     S13            s13     1
; Material_Texture2D_10Sampler      sampler      NA          NA     S14            s14     1
; Material_Texture2D_11Sampler      sampler      NA          NA     S15            s15     1
; Material_Texture2D_12Sampler      sampler      NA          NA     S16            s16     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_DirectionalLightShadowingBrickTexture   texture     f32          3d      T1             t1     1
; View_PrimitiveSceneData           texture  struct         r/o      T2             t2     1
; View_InstanceSceneData            texture  struct         r/o      T3             t3     1
; View_InstancePayloadData          texture  struct         r/o      T4             t4     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d      T5             t5     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d      T6             t6     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d      T7             t7     1
; Nanite_ClusterPageData            texture    byte         r/o      T8             t8     1
; Nanite_VisibleClustersSWHW        texture    byte         r/o      T9             t9     1
; Nanite_VisBuffer64                texture     u32          2d     T10            t10     1
; Material_Texture2D_0              texture     f32          2d     T11            t11     1
; Material_Texture2D_1              texture     f32          2d     T12            t12     1
; Material_Texture2D_2              texture     f32          2d     T13            t13     1
; Material_Texture2D_3              texture     f32          2d     T14            t14     1
; Material_Texture2D_4              texture     f32          2d     T15            t15     1
; Material_Texture2D_5              texture     f32          2d     T16            t16     1
; Material_Texture2D_6              texture     f32          2d     T17            t17     1
; Material_Texture2D_7              texture     f32          2d     T18            t18     1
; Material_Texture2D_8              texture     f32          2d     T19            t19     1
; Material_Texture2D_9              texture     f32          2d     T20            t20     1
; Material_Texture2D_10             texture     f32          2d     T21            t21     1
; Material_Texture2D_11             texture     f32          2d     T22            t22     1
; Material_Texture2D_12             texture     f32          2d     T23            t23     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 28
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5 }
;   output 1 depends on inputs: { 4, 5 }
;   output 2 depends on inputs: { 4, 5 }
;   output 4 depends on inputs: { 4, 5 }
;   output 5 depends on inputs: { 4, 5 }
;   output 6 depends on inputs: { 4, 5 }
;   output 7 depends on inputs: { 4, 5 }
;   output 8 depends on inputs: { 4, 5 }
;   output 9 depends on inputs: { 4, 5 }
;   output 10 depends on inputs: { 4, 5 }
;   output 12 depends on inputs: { 4, 5 }
;   output 13 depends on inputs: { 4, 5 }
;   output 14 depends on inputs: { 4, 5 }
;   output 15 depends on inputs: { 4, 5 }
;   output 16 depends on inputs: { 4, 5 }
;   output 17 depends on inputs: { 4, 5 }
;   output 18 depends on inputs: { 4, 5 }
;   output 19 depends on inputs: { 4, 5 }
;   output 24 depends on inputs: { 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_IndirectLightingCache = type { <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, float, float, float, float, [3 x <4 x float>], [3 x <4 x float>], <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Nanite = type { <4 x i32>, <4 x i32>, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [6 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 3 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 3 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 3 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 3 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 3 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 3 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 3 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 3 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 3 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 3 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 13, i32 316 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 13, i32 268 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %49 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %50 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %54 = extractvalue %dx.types.CBufRet.f32 %51, 2
  %55 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.f32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.f32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.f32 %55, 2
  %59 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.f32 %59, 0
  %61 = extractvalue %dx.types.CBufRet.f32 %59, 1
  %62 = extractvalue %dx.types.CBufRet.f32 %59, 2
  %63 = extractvalue %dx.types.CBufRet.f32 %59, 3
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 3
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 139)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %70, 3
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 3
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %90 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.f32 %90, 0
  %92 = extractvalue %dx.types.CBufRet.f32 %90, 1
  %93 = extractvalue %dx.types.CBufRet.f32 %90, 3
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = extractvalue %dx.types.CBufRet.f32 %94, 3
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 0
  %101 = extractvalue %dx.types.CBufRet.f32 %99, 1
  %102 = extractvalue %dx.types.CBufRet.f32 %99, 2
  %103 = extractvalue %dx.types.CBufRet.f32 %99, 3
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 87)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = extractvalue %dx.types.CBufRet.f32 %104, 3
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 88)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %113 = extractvalue %dx.types.CBufRet.f32 %109, 3
  %114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 108)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.f32 %114, 0
  %116 = extractvalue %dx.types.CBufRet.f32 %114, 1
  %117 = extractvalue %dx.types.CBufRet.f32 %114, 2
  %118 = fadd fast float %49, -5.000000e-01
  %119 = fadd fast float %50, -5.000000e-01
  %120 = fptoui float %118 to i32
  %121 = fptoui float %119 to i32
  %122 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %123 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %122, i32 0, i32 %120, i32 %121, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %124 = extractvalue %dx.types.ResRet.i32 %123, 0
  %125 = extractvalue %dx.types.ResRet.i32 %123, 1
  %126 = lshr i32 %124, 7
  %127 = and i32 %124, 127
  %128 = bitcast i32 %125 to float
  %129 = icmp eq i32 %126, 0
  br i1 %129, label %1412, label %130

; <label>:130                                     ; preds = %0
  %131 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %132 = shl nuw nsw i32 %126, 3
  %133 = add nsw i32 %132, -8
  %134 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %135 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %134, i32 %133, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %136 = extractvalue %dx.types.ResRet.i32 %135, 0
  %137 = extractvalue %dx.types.ResRet.i32 %135, 1
  %138 = lshr i32 %136, 16
  %139 = and i32 %137, 16777215
  %140 = lshr i32 %137, 24
  %141 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %131, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.i32 %141, 0
  %143 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %144 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %143, i32 %139, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %145 = extractvalue %dx.types.ResRet.f32 %144, 0
  %146 = bitcast float %145 to i32
  %147 = and i32 %146, 1048575
  %148 = lshr i32 %146, 20
  %149 = extractvalue %dx.types.ResRet.f32 %144, 1
  %150 = bitcast float %149 to i32
  %151 = and i32 %150, 16777215
  %152 = mul nuw nsw i32 %147, 41
  %153 = add nuw nsw i32 %152, 26
  %154 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %155 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %154, i32 %153, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %156 = extractvalue %dx.types.ResRet.f32 %155, 3
  %157 = bitcast float %156 to i32
  %158 = add nuw nsw i32 %152, 27
  %159 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %154, i32 %158, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %160 = extractvalue %dx.types.ResRet.f32 %159, 3
  %161 = bitcast float %160 to i32
  %162 = mul i32 %161, %151
  %163 = and i32 %148, 64
  %164 = icmp ne i32 %163, 0
  %165 = and i32 %148, 8
  %166 = and i32 %148, 160
  %167 = icmp ne i32 %166, 0
  %168 = zext i1 %167 to i32
  %169 = select i1 %164, i32 2, i32 %168
  %170 = add i32 %157, %169
  %171 = add i32 %170, %162
  %172 = add nuw nsw i32 %152, 1
  %173 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %154, i32 %172, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %174 = extractvalue %dx.types.ResRet.f32 %173, 0
  %175 = extractvalue %dx.types.ResRet.f32 %173, 1
  %176 = extractvalue %dx.types.ResRet.f32 %173, 2
  %177 = add nuw nsw i32 %152, 14
  %178 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %154, i32 %177, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %179 = extractvalue %dx.types.ResRet.f32 %178, 0
  %180 = extractvalue %dx.types.ResRet.f32 %178, 1
  %181 = extractvalue %dx.types.ResRet.f32 %178, 2
  %182 = add nuw nsw i32 %152, 15
  %183 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %154, i32 %182, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %184 = extractvalue %dx.types.ResRet.f32 %183, 0
  %185 = extractvalue %dx.types.ResRet.f32 %183, 1
  %186 = extractvalue %dx.types.ResRet.f32 %183, 2
  %187 = add nuw nsw i32 %152, 16
  %188 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %154, i32 %187, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %189 = extractvalue %dx.types.ResRet.f32 %188, 0
  %190 = extractvalue %dx.types.ResRet.f32 %188, 1
  %191 = extractvalue %dx.types.ResRet.f32 %188, 2
  %192 = add i32 %142, %139
  %193 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %143, i32 %192, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %194 = extractvalue %dx.types.ResRet.f32 %193, 0
  %195 = extractvalue %dx.types.ResRet.f32 %193, 1
  %196 = extractvalue %dx.types.ResRet.f32 %193, 2
  %197 = extractvalue %dx.types.ResRet.f32 %193, 3
  %198 = bitcast float %194 to i32
  %199 = bitcast float %195 to i32
  %200 = bitcast float %196 to i32
  %201 = bitcast float %197 to i32
  %202 = shl i32 %142, 1
  %203 = add i32 %202, %139
  %204 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %143, i32 %203, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %205 = extractvalue %dx.types.ResRet.f32 %204, 0
  %206 = extractvalue %dx.types.ResRet.f32 %204, 1
  %207 = extractvalue %dx.types.ResRet.f32 %204, 2
  %208 = and i32 %198, 65535
  %209 = uitofp i32 %208 to float
  %210 = lshr i32 %198, 16
  %211 = uitofp i32 %210 to float
  %212 = and i32 %199, 32767
  %213 = uitofp i32 %212 to float
  %214 = fadd fast float %209, -3.276800e+04
  %215 = fadd fast float %211, -3.276800e+04
  %216 = fadd fast float %213, -1.638400e+04
  %217 = fmul fast float %216, 0x3F06A0F8E0000000
  %218 = and i32 %199, 32768
  %219 = icmp ne i32 %218, 0
  %220 = fadd fast float %214, %215
  %221 = fmul fast float %220, 0x3F00002000000000
  %222 = fsub fast float %214, %215
  %223 = fmul fast float %222, 0x3F00002000000000
  %224 = call float @dx.op.unary.f32(i32 6, float %221)  ; FAbs(value)
  %225 = call float @dx.op.unary.f32(i32 6, float %223)  ; FAbs(value)
  %226 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %224, float %225)  ; Dot2(ax,ay,bx,by)
  %227 = fsub fast float 2.000000e+00, %226
  %228 = call float @dx.op.dot3.f32(i32 55, float %221, float %223, float %227, float %221, float %223, float %227)  ; Dot3(ax,ay,az,bx,by,bz)
  %229 = call float @dx.op.unary.f32(i32 25, float %228)  ; Rsqrt(value)
  %230 = fmul fast float %229, %221
  %231 = fmul fast float %229, %223
  %232 = fmul fast float %229, %227
  %233 = fadd fast float %232, 1.000000e+00
  %234 = fdiv fast float 1.000000e+00, %233
  %235 = fmul fast float %231, %230
  %236 = fmul fast float %235, %234
  %237 = fsub fast float -0.000000e+00, %236
  %238 = fmul fast float %230, %230
  %239 = fmul fast float %238, %234
  %240 = fsub fast float 1.000000e+00, %239
  %241 = fmul fast float %231, %231
  %242 = fmul fast float %241, %234
  %243 = fsub fast float 1.000000e+00, %242
  %244 = fmul fast float %217, %217
  %245 = fsub fast float 1.000000e+00, %244
  %246 = call float @dx.op.unary.f32(i32 24, float %245)  ; Sqrt(value)
  %247 = select i1 %219, float %217, float %246
  %248 = select i1 %219, float %246, float %217
  %249 = fmul fast float %240, %247
  %250 = fmul fast float %247, %237
  %251 = fmul fast float %247, %230
  %252 = fmul fast float %248, %237
  %253 = fmul fast float %243, %248
  %254 = fmul fast float %231, %248
  %255 = fsub fast float -0.000000e+00, %254
  %256 = fadd fast float %249, %252
  %257 = fadd fast float %250, %253
  %258 = fsub fast float %255, %251
  %259 = fmul fast float %258, %231
  %260 = fmul fast float %257, %232
  %261 = fsub fast float %259, %260
  %262 = fmul fast float %256, %232
  %263 = fmul fast float %258, %230
  %264 = fsub fast float %262, %263
  %265 = fmul fast float %257, %230
  %266 = fmul fast float %256, %231
  %267 = fsub fast float %265, %266
  %268 = lshr i32 %201, 16
  %269 = shl i32 %268, 23
  %270 = add i32 %269, -125829120
  %271 = bitcast i32 %270 to float
  %272 = lshr i32 %200, 16
  %273 = and i32 %200, 65535
  %274 = and i32 %201, 65535
  %275 = uitofp i32 %273 to float
  %276 = uitofp i32 %272 to float
  %277 = uitofp i32 %274 to float
  %278 = fadd fast float %275, -3.276800e+04
  %279 = fadd fast float %276, -3.276800e+04
  %280 = fadd fast float %277, -3.276800e+04
  %281 = fmul fast float %271, %278
  %282 = fmul fast float %271, %279
  %283 = fmul fast float %271, %280
  %284 = fmul fast float %256, %281
  %285 = fmul fast float %257, %281
  %286 = fmul fast float %258, %281
  %287 = fmul fast float %261, %282
  %288 = fmul fast float %264, %282
  %289 = fmul fast float %267, %282
  %290 = fmul fast float %230, %283
  %291 = fmul fast float %231, %283
  %292 = fmul fast float %232, %283
  %293 = call float @dx.op.unary.f32(i32 6, float %281)  ; FAbs(value)
  %294 = call float @dx.op.unary.f32(i32 6, float %282)  ; FAbs(value)
  %295 = call float @dx.op.unary.f32(i32 6, float %283)  ; FAbs(value)
  %296 = fdiv fast float 1.000000e+00, %293
  %297 = fdiv fast float 1.000000e+00, %294
  %298 = fdiv fast float 1.000000e+00, %295
  %299 = icmp eq i32 %171, -1
  %300 = icmp eq i32 %165, 0
  %301 = or i1 %300, %299
  br i1 %301, label %403, label %302, !dx.controlflow.hints !80

; <label>:302                                     ; preds = %130
  %303 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %304 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %303, i32 %171, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %305 = extractvalue %dx.types.ResRet.f32 %304, 0
  %306 = extractvalue %dx.types.ResRet.f32 %304, 1
  %307 = extractvalue %dx.types.ResRet.f32 %304, 2
  %308 = extractvalue %dx.types.ResRet.f32 %304, 3
  %309 = bitcast float %305 to i32
  %310 = bitcast float %306 to i32
  %311 = bitcast float %307 to i32
  %312 = bitcast float %308 to i32
  %313 = add i32 %171, 1
  %314 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %303, i32 %313, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %315 = extractvalue %dx.types.ResRet.f32 %314, 0
  %316 = extractvalue %dx.types.ResRet.f32 %314, 1
  %317 = extractvalue %dx.types.ResRet.f32 %314, 2
  %318 = and i32 %309, 65535
  %319 = uitofp i32 %318 to float
  %320 = lshr i32 %309, 16
  %321 = uitofp i32 %320 to float
  %322 = and i32 %310, 32767
  %323 = uitofp i32 %322 to float
  %324 = fadd fast float %319, -3.276800e+04
  %325 = fadd fast float %321, -3.276800e+04
  %326 = fadd fast float %323, -1.638400e+04
  %327 = fmul fast float %326, 0x3F06A0F8E0000000
  %328 = and i32 %310, 32768
  %329 = icmp ne i32 %328, 0
  %330 = fadd fast float %324, %325
  %331 = fmul fast float %330, 0x3F00002000000000
  %332 = fsub fast float %324, %325
  %333 = fmul fast float %332, 0x3F00002000000000
  %334 = call float @dx.op.unary.f32(i32 6, float %331)  ; FAbs(value)
  %335 = call float @dx.op.unary.f32(i32 6, float %333)  ; FAbs(value)
  %336 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %334, float %335)  ; Dot2(ax,ay,bx,by)
  %337 = fsub fast float 2.000000e+00, %336
  %338 = call float @dx.op.dot3.f32(i32 55, float %331, float %333, float %337, float %331, float %333, float %337)  ; Dot3(ax,ay,az,bx,by,bz)
  %339 = call float @dx.op.unary.f32(i32 25, float %338)  ; Rsqrt(value)
  %340 = fmul fast float %339, %331
  %341 = fmul fast float %339, %333
  %342 = fmul fast float %339, %337
  %343 = fadd fast float %342, 1.000000e+00
  %344 = fdiv fast float 1.000000e+00, %343
  %345 = fmul fast float %341, %340
  %346 = fmul fast float %345, %344
  %347 = fsub fast float -0.000000e+00, %346
  %348 = fmul fast float %340, %340
  %349 = fmul fast float %348, %344
  %350 = fsub fast float 1.000000e+00, %349
  %351 = fmul fast float %341, %341
  %352 = fmul fast float %351, %344
  %353 = fsub fast float 1.000000e+00, %352
  %354 = fmul fast float %327, %327
  %355 = fsub fast float 1.000000e+00, %354
  %356 = call float @dx.op.unary.f32(i32 24, float %355)  ; Sqrt(value)
  %357 = select i1 %329, float %327, float %356
  %358 = select i1 %329, float %356, float %327
  %359 = fmul fast float %350, %357
  %360 = fmul fast float %357, %347
  %361 = fmul fast float %357, %340
  %362 = fmul fast float %358, %347
  %363 = fmul fast float %353, %358
  %364 = fmul fast float %341, %358
  %365 = fsub fast float -0.000000e+00, %364
  %366 = fadd fast float %359, %362
  %367 = fadd fast float %360, %363
  %368 = fsub fast float %365, %361
  %369 = fmul fast float %368, %341
  %370 = fmul fast float %367, %342
  %371 = fsub fast float %369, %370
  %372 = fmul fast float %366, %342
  %373 = fmul fast float %368, %340
  %374 = fsub fast float %372, %373
  %375 = fmul fast float %367, %340
  %376 = fmul fast float %366, %341
  %377 = fsub fast float %375, %376
  %378 = lshr i32 %312, 16
  %379 = shl i32 %378, 23
  %380 = add i32 %379, -125829120
  %381 = bitcast i32 %380 to float
  %382 = lshr i32 %311, 16
  %383 = and i32 %311, 65535
  %384 = and i32 %312, 65535
  %385 = uitofp i32 %383 to float
  %386 = uitofp i32 %382 to float
  %387 = uitofp i32 %384 to float
  %388 = fadd fast float %385, -3.276800e+04
  %389 = fadd fast float %386, -3.276800e+04
  %390 = fadd fast float %387, -3.276800e+04
  %391 = fmul fast float %381, %388
  %392 = fmul fast float %381, %389
  %393 = fmul fast float %381, %390
  %394 = fmul fast float %366, %391
  %395 = fmul fast float %367, %391
  %396 = fmul fast float %368, %391
  %397 = fmul fast float %371, %392
  %398 = fmul fast float %374, %392
  %399 = fmul fast float %377, %392
  %400 = fmul fast float %340, %393
  %401 = fmul fast float %341, %393
  %402 = fmul fast float %342, %393
  br label %446

; <label>:403                                     ; preds = %130
  %404 = extractvalue %dx.types.ResRet.f32 %188, 3
  %405 = extractvalue %dx.types.ResRet.f32 %183, 3
  %406 = extractvalue %dx.types.ResRet.f32 %178, 3
  %407 = fmul fast float %284, %179
  %408 = call float @dx.op.tertiary.f32(i32 46, float %285, float %180, float %407)  ; FMad(a,b,c)
  %409 = call float @dx.op.tertiary.f32(i32 46, float %286, float %181, float %408)  ; FMad(a,b,c)
  %410 = fmul fast float %284, %184
  %411 = call float @dx.op.tertiary.f32(i32 46, float %285, float %185, float %410)  ; FMad(a,b,c)
  %412 = call float @dx.op.tertiary.f32(i32 46, float %286, float %186, float %411)  ; FMad(a,b,c)
  %413 = fmul fast float %284, %189
  %414 = call float @dx.op.tertiary.f32(i32 46, float %285, float %190, float %413)  ; FMad(a,b,c)
  %415 = call float @dx.op.tertiary.f32(i32 46, float %286, float %191, float %414)  ; FMad(a,b,c)
  %416 = fmul fast float %287, %179
  %417 = call float @dx.op.tertiary.f32(i32 46, float %288, float %180, float %416)  ; FMad(a,b,c)
  %418 = call float @dx.op.tertiary.f32(i32 46, float %289, float %181, float %417)  ; FMad(a,b,c)
  %419 = fmul fast float %287, %184
  %420 = call float @dx.op.tertiary.f32(i32 46, float %288, float %185, float %419)  ; FMad(a,b,c)
  %421 = call float @dx.op.tertiary.f32(i32 46, float %289, float %186, float %420)  ; FMad(a,b,c)
  %422 = fmul fast float %287, %189
  %423 = call float @dx.op.tertiary.f32(i32 46, float %288, float %190, float %422)  ; FMad(a,b,c)
  %424 = call float @dx.op.tertiary.f32(i32 46, float %289, float %191, float %423)  ; FMad(a,b,c)
  %425 = fmul fast float %290, %179
  %426 = call float @dx.op.tertiary.f32(i32 46, float %291, float %180, float %425)  ; FMad(a,b,c)
  %427 = call float @dx.op.tertiary.f32(i32 46, float %292, float %181, float %426)  ; FMad(a,b,c)
  %428 = fmul fast float %290, %184
  %429 = call float @dx.op.tertiary.f32(i32 46, float %291, float %185, float %428)  ; FMad(a,b,c)
  %430 = call float @dx.op.tertiary.f32(i32 46, float %292, float %186, float %429)  ; FMad(a,b,c)
  %431 = fmul fast float %290, %189
  %432 = call float @dx.op.tertiary.f32(i32 46, float %291, float %190, float %431)  ; FMad(a,b,c)
  %433 = call float @dx.op.tertiary.f32(i32 46, float %292, float %191, float %432)  ; FMad(a,b,c)
  %434 = fmul fast float %205, %179
  %435 = call float @dx.op.tertiary.f32(i32 46, float %206, float %180, float %434)  ; FMad(a,b,c)
  %436 = call float @dx.op.tertiary.f32(i32 46, float %207, float %181, float %435)  ; FMad(a,b,c)
  %437 = fadd fast float %436, %406
  %438 = fmul fast float %205, %184
  %439 = call float @dx.op.tertiary.f32(i32 46, float %206, float %185, float %438)  ; FMad(a,b,c)
  %440 = call float @dx.op.tertiary.f32(i32 46, float %207, float %186, float %439)  ; FMad(a,b,c)
  %441 = fadd fast float %440, %405
  %442 = fmul fast float %205, %189
  %443 = call float @dx.op.tertiary.f32(i32 46, float %206, float %190, float %442)  ; FMad(a,b,c)
  %444 = call float @dx.op.tertiary.f32(i32 46, float %207, float %191, float %443)  ; FMad(a,b,c)
  %445 = fadd fast float %444, %404
  br label %446

; <label>:446                                     ; preds = %403, %302
  %447 = phi float [ %394, %302 ], [ %409, %403 ]
  %448 = phi float [ %395, %302 ], [ %412, %403 ]
  %449 = phi float [ %396, %302 ], [ %415, %403 ]
  %450 = phi float [ %397, %302 ], [ %418, %403 ]
  %451 = phi float [ %398, %302 ], [ %421, %403 ]
  %452 = phi float [ %399, %302 ], [ %424, %403 ]
  %453 = phi float [ %400, %302 ], [ %427, %403 ]
  %454 = phi float [ %401, %302 ], [ %430, %403 ]
  %455 = phi float [ %402, %302 ], [ %433, %403 ]
  %456 = phi float [ %315, %302 ], [ %437, %403 ]
  %457 = phi float [ %316, %302 ], [ %441, %403 ]
  %458 = phi float [ %317, %302 ], [ %445, %403 ]
  %459 = fsub fast float %174, %52
  %460 = fsub fast float %175, %53
  %461 = fsub fast float %176, %54
  %462 = fmul fast float %459, 2.097152e+06
  %463 = fmul fast float %460, 2.097152e+06
  %464 = fmul fast float %461, 2.097152e+06
  %465 = fadd fast float %462, %56
  %466 = fadd fast float %465, %205
  %467 = fadd fast float %463, %57
  %468 = fadd fast float %467, %206
  %469 = fadd fast float %464, %58
  %470 = fadd fast float %469, %207
  %471 = extractvalue %dx.types.CBufRet.i32 %141, 1
  %472 = call i32 @dx.op.binary.i32(i32 40, i32 %138, i32 %471)  ; UMin(a,b)
  %473 = shl i32 %472, 17
  %474 = sub nsw i32 %138, %471
  %475 = call i32 @dx.op.binary.i32(i32 37, i32 %474, i32 0)  ; IMax(a,b)
  %476 = shl i32 %475, 15
  %477 = add i32 %476, %473
  %478 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %479 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %477, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %480 = extractvalue %dx.types.ResRet.i32 %479, 0
  %481 = shl i32 %480, 4
  %482 = shl nuw nsw i32 %140, 4
  %483 = or i32 %477, %482
  %484 = add nsw i32 %483, 16
  %485 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %484, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %486 = extractvalue %dx.types.ResRet.i32 %485, 0
  %487 = extractvalue %dx.types.ResRet.i32 %485, 1
  %488 = extractvalue %dx.types.ResRet.i32 %485, 3
  %489 = add i32 %484, %481
  %490 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %489, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %491 = extractvalue %dx.types.ResRet.i32 %490, 0
  %492 = extractvalue %dx.types.ResRet.i32 %490, 1
  %493 = extractvalue %dx.types.ResRet.i32 %490, 2
  %494 = extractvalue %dx.types.ResRet.i32 %490, 3
  %495 = mul i32 %480, 80
  %496 = add i32 %484, %495
  %497 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %496, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %498 = extractvalue %dx.types.ResRet.i32 %497, 0
  %499 = extractvalue %dx.types.ResRet.i32 %497, 1
  %500 = extractvalue %dx.types.ResRet.i32 %497, 2
  %501 = lshr i32 %486, 9
  %502 = lshr i32 %487, 8
  %503 = and i32 %494, 15
  %504 = lshr i32 %494, 9
  %505 = and i32 %504, 31
  %506 = lshr i32 %494, 14
  %507 = and i32 %506, 31
  %508 = lshr i32 %494, 19
  %509 = and i32 %508, 31
  %510 = lshr i32 %494, 24
  %511 = and i32 %510, 15
  %512 = and i32 %498, 4194303
  %513 = lshr i32 %498, 22
  %514 = and i32 %499, 4194303
  %515 = and i32 %499, 29360128
  %516 = add nuw nsw i32 %503, 10
  %517 = mul nuw nsw i32 %516, %127
  %518 = add i32 %502, %477
  %519 = lshr i32 %517, 5
  %520 = shl nuw nsw i32 %519, 2
  %521 = add i32 %518, %520
  %522 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %521, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %523 = extractvalue %dx.types.ResRet.i32 %522, 0
  %524 = extractvalue %dx.types.ResRet.i32 %522, 1
  %525 = and i32 %517, 31
  %526 = lshr i32 %523, %525
  %527 = icmp ne i32 %525, 0
  %528 = sub nsw i32 0, %517
  %529 = and i32 %528, 31
  %530 = shl i32 %524, %529
  %531 = select i1 %527, i32 %530, i32 0
  %532 = or i32 %531, %526
  %533 = shl i32 1, %503
  %534 = add i32 %533, -1
  %535 = and i32 %532, %534
  %536 = lshr i32 %532, %503
  %537 = and i32 %536, 31
  %538 = add nuw nsw i32 %503, 5
  %539 = lshr i32 %532, %538
  %540 = and i32 %539, 31
  %541 = add i32 %537, %535
  %542 = add i32 %540, %535
  %543 = add nuw nsw i32 %505, %507
  %544 = add nuw nsw i32 %543, %509
  %545 = mul i32 %535, %544
  %546 = add i32 %501, %477
  %547 = lshr i32 %545, 5
  %548 = shl nuw nsw i32 %547, 2
  %549 = add i32 %546, %548
  %550 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %549, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %551 = extractvalue %dx.types.ResRet.i32 %550, 0
  %552 = extractvalue %dx.types.ResRet.i32 %550, 1
  %553 = extractvalue %dx.types.ResRet.i32 %550, 2
  %554 = and i32 %545, 31
  %555 = lshr i32 %551, %554
  %556 = icmp ne i32 %554, 0
  %557 = sub i32 0, %545
  %558 = and i32 %557, 31
  %559 = shl i32 %552, %558
  %560 = select i1 %556, i32 %559, i32 0
  %561 = or i32 %560, %555
  %562 = lshr i32 %552, %554
  %563 = shl i32 %553, %558
  %564 = select i1 %556, i32 %563, i32 0
  %565 = or i32 %564, %562
  %566 = shl i32 1, %505
  %567 = add i32 %566, -1
  %568 = and i32 %561, %567
  %569 = lshr i32 %561, %505
  %570 = icmp ne i32 %505, 0
  %571 = sub nsw i32 0, %504
  %572 = and i32 %571, 31
  %573 = shl i32 %565, %572
  %574 = select i1 %570, i32 %573, i32 0
  %575 = or i32 %574, %569
  %576 = lshr i32 %565, %505
  %577 = shl i32 1, %507
  %578 = add i32 %577, -1
  %579 = and i32 %575, %578
  %580 = lshr i32 %575, %507
  %581 = icmp ne i32 %507, 0
  %582 = sub nsw i32 0, %506
  %583 = and i32 %582, 31
  %584 = shl i32 %576, %583
  %585 = select i1 %581, i32 %584, i32 0
  %586 = or i32 %580, %585
  %587 = shl i32 1, %509
  %588 = add i32 %587, -1
  %589 = and i32 %586, %588
  %590 = shl i32 %494, 19
  %591 = and i32 %590, 260046848
  %592 = sub nsw i32 1132462080, %591
  %593 = bitcast i32 %592 to float
  %594 = add i32 %568, %491
  %595 = add i32 %579, %492
  %596 = add i32 %589, %493
  %597 = sitofp i32 %594 to float
  %598 = sitofp i32 %595 to float
  %599 = sitofp i32 %596 to float
  %600 = fmul fast float %597, %593
  %601 = fmul fast float %598, %593
  %602 = fmul fast float %599, %593
  %603 = mul i32 %541, %544
  %604 = lshr i32 %603, 5
  %605 = shl nuw nsw i32 %604, 2
  %606 = add i32 %546, %605
  %607 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %606, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %608 = extractvalue %dx.types.ResRet.i32 %607, 0
  %609 = extractvalue %dx.types.ResRet.i32 %607, 1
  %610 = extractvalue %dx.types.ResRet.i32 %607, 2
  %611 = and i32 %603, 31
  %612 = lshr i32 %608, %611
  %613 = icmp ne i32 %611, 0
  %614 = sub i32 0, %603
  %615 = and i32 %614, 31
  %616 = shl i32 %609, %615
  %617 = select i1 %613, i32 %616, i32 0
  %618 = or i32 %617, %612
  %619 = lshr i32 %609, %611
  %620 = shl i32 %610, %615
  %621 = select i1 %613, i32 %620, i32 0
  %622 = or i32 %621, %619
  %623 = and i32 %618, %567
  %624 = lshr i32 %618, %505
  %625 = shl i32 %622, %572
  %626 = select i1 %570, i32 %625, i32 0
  %627 = or i32 %626, %624
  %628 = lshr i32 %622, %505
  %629 = and i32 %627, %578
  %630 = lshr i32 %627, %507
  %631 = shl i32 %628, %583
  %632 = select i1 %581, i32 %631, i32 0
  %633 = or i32 %630, %632
  %634 = and i32 %633, %588
  %635 = add i32 %623, %491
  %636 = add i32 %629, %492
  %637 = add i32 %634, %493
  %638 = sitofp i32 %635 to float
  %639 = sitofp i32 %636 to float
  %640 = sitofp i32 %637 to float
  %641 = fmul fast float %638, %593
  %642 = fmul fast float %639, %593
  %643 = fmul fast float %640, %593
  %644 = mul i32 %542, %544
  %645 = lshr i32 %644, 5
  %646 = shl nuw nsw i32 %645, 2
  %647 = add i32 %546, %646
  %648 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %647, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %649 = extractvalue %dx.types.ResRet.i32 %648, 0
  %650 = extractvalue %dx.types.ResRet.i32 %648, 1
  %651 = extractvalue %dx.types.ResRet.i32 %648, 2
  %652 = and i32 %644, 31
  %653 = lshr i32 %649, %652
  %654 = icmp ne i32 %652, 0
  %655 = sub i32 0, %644
  %656 = and i32 %655, 31
  %657 = shl i32 %650, %656
  %658 = select i1 %654, i32 %657, i32 0
  %659 = or i32 %658, %653
  %660 = lshr i32 %650, %652
  %661 = shl i32 %651, %656
  %662 = select i1 %654, i32 %661, i32 0
  %663 = or i32 %662, %660
  %664 = and i32 %659, %567
  %665 = lshr i32 %659, %505
  %666 = shl i32 %663, %572
  %667 = select i1 %570, i32 %666, i32 0
  %668 = or i32 %667, %665
  %669 = lshr i32 %663, %505
  %670 = and i32 %668, %578
  %671 = lshr i32 %668, %507
  %672 = shl i32 %669, %583
  %673 = select i1 %581, i32 %672, i32 0
  %674 = or i32 %671, %673
  %675 = and i32 %674, %588
  %676 = add i32 %664, %491
  %677 = add i32 %670, %492
  %678 = add i32 %675, %493
  %679 = sitofp i32 %676 to float
  %680 = sitofp i32 %677 to float
  %681 = sitofp i32 %678 to float
  %682 = fmul fast float %679, %593
  %683 = fmul fast float %680, %593
  %684 = fmul fast float %681, %593
  %685 = add i32 %514, %477
  %686 = add i32 %512, %477
  %687 = and i32 %488, 15
  %688 = lshr i32 %488, 4
  %689 = and i32 %688, 15
  %690 = lshr i32 %488, 8
  %691 = and i32 %690, 15
  %692 = lshr i32 %488, 12
  %693 = and i32 %692, 15
  %694 = mul i32 %535, %513
  %695 = shl nuw nsw i32 %511, 1
  %696 = ashr i32 %694, 5
  %697 = shl nsw i32 %696, 2
  %698 = add i32 %697, %686
  %699 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %698, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %700 = extractvalue %dx.types.ResRet.i32 %699, 0
  %701 = extractvalue %dx.types.ResRet.i32 %699, 1
  %702 = extractvalue %dx.types.ResRet.i32 %699, 2
  %703 = extractvalue %dx.types.ResRet.i32 %699, 3
  %704 = and i32 %694, 31
  %705 = lshr i32 %700, %704
  %706 = icmp ne i32 %704, 0
  %707 = sub i32 0, %694
  %708 = and i32 %707, 31
  %709 = shl i32 %701, %708
  %710 = select i1 %706, i32 %709, i32 0
  %711 = or i32 %710, %705
  %712 = lshr i32 %701, %704
  %713 = shl i32 %702, %708
  %714 = select i1 %706, i32 %713, i32 0
  %715 = or i32 %714, %712
  %716 = lshr i32 %702, %704
  %717 = shl i32 %703, %708
  %718 = select i1 %706, i32 %717, i32 0
  %719 = or i32 %718, %716
  %720 = shl i32 1, %695
  %721 = add i32 %720, -1
  %722 = and i32 %711, %721
  %723 = shl i32 1, %511
  %724 = add i32 %723, -1
  %725 = and i32 %722, %724
  %726 = lshr i32 %722, %511
  %727 = and i32 %726, %724
  %728 = uitofp i32 %725 to float
  %729 = uitofp i32 %727 to float
  %730 = uitofp i32 %724 to float
  %731 = fdiv fast float 2.000000e+00, %730
  %732 = fmul fast float %728, %731
  %733 = fmul fast float %729, %731
  %734 = fadd fast float %732, -1.000000e+00
  %735 = fadd fast float %733, -1.000000e+00
  %736 = call float @dx.op.unary.f32(i32 6, float %734)  ; FAbs(value)
  %737 = fsub fast float 1.000000e+00, %736
  %738 = call float @dx.op.unary.f32(i32 6, float %735)  ; FAbs(value)
  %739 = fsub fast float %737, %738
  %740 = fsub fast float -0.000000e+00, %739
  %741 = call float @dx.op.unary.f32(i32 7, float %740)  ; Saturate(value)
  %742 = fsub fast float -0.000000e+00, %741
  %743 = fcmp fast oge float %734, 0.000000e+00
  %744 = fcmp fast oge float %735, 0.000000e+00
  %745 = select i1 %743, float %742, float %741
  %746 = select i1 %744, float %742, float %741
  %747 = fadd fast float %745, %734
  %748 = fadd fast float %746, %735
  %749 = call float @dx.op.dot3.f32(i32 55, float %747, float %748, float %739, float %747, float %748, float %739)  ; Dot3(ax,ay,az,bx,by,bz)
  %750 = call float @dx.op.unary.f32(i32 25, float %749)  ; Rsqrt(value)
  %751 = fmul fast float %747, %750
  %752 = fmul fast float %748, %750
  %753 = fmul fast float %750, %739
  %754 = lshr i32 %711, %695
  %755 = icmp ne i32 %511, 0
  %756 = sub nsw i32 0, %695
  %757 = and i32 %756, 30
  %758 = shl i32 %715, %757
  %759 = select i1 %755, i32 %758, i32 0
  %760 = or i32 %759, %754
  %761 = lshr i32 %715, %695
  %762 = shl i32 %719, %757
  %763 = select i1 %755, i32 %762, i32 0
  %764 = or i32 %763, %761
  %765 = add nuw nsw i32 %687, %689
  %766 = add nuw nsw i32 %765, %691
  %767 = add nuw nsw i32 %766, %693
  %768 = mul i32 %541, %513
  %769 = ashr i32 %768, 5
  %770 = shl nsw i32 %769, 2
  %771 = add i32 %770, %686
  %772 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %771, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %773 = extractvalue %dx.types.ResRet.i32 %772, 0
  %774 = extractvalue %dx.types.ResRet.i32 %772, 1
  %775 = extractvalue %dx.types.ResRet.i32 %772, 2
  %776 = extractvalue %dx.types.ResRet.i32 %772, 3
  %777 = and i32 %768, 31
  %778 = lshr i32 %773, %777
  %779 = icmp ne i32 %777, 0
  %780 = sub i32 0, %768
  %781 = and i32 %780, 31
  %782 = shl i32 %774, %781
  %783 = select i1 %779, i32 %782, i32 0
  %784 = or i32 %783, %778
  %785 = lshr i32 %774, %777
  %786 = shl i32 %775, %781
  %787 = select i1 %779, i32 %786, i32 0
  %788 = or i32 %787, %785
  %789 = lshr i32 %775, %777
  %790 = shl i32 %776, %781
  %791 = select i1 %779, i32 %790, i32 0
  %792 = or i32 %791, %789
  %793 = and i32 %784, %721
  %794 = and i32 %793, %724
  %795 = lshr i32 %793, %511
  %796 = and i32 %795, %724
  %797 = uitofp i32 %794 to float
  %798 = uitofp i32 %796 to float
  %799 = fmul fast float %797, %731
  %800 = fmul fast float %798, %731
  %801 = fadd fast float %799, -1.000000e+00
  %802 = fadd fast float %800, -1.000000e+00
  %803 = call float @dx.op.unary.f32(i32 6, float %801)  ; FAbs(value)
  %804 = fsub fast float 1.000000e+00, %803
  %805 = call float @dx.op.unary.f32(i32 6, float %802)  ; FAbs(value)
  %806 = fsub fast float %804, %805
  %807 = fsub fast float -0.000000e+00, %806
  %808 = call float @dx.op.unary.f32(i32 7, float %807)  ; Saturate(value)
  %809 = fsub fast float -0.000000e+00, %808
  %810 = fcmp fast oge float %801, 0.000000e+00
  %811 = fcmp fast oge float %802, 0.000000e+00
  %812 = select i1 %810, float %809, float %808
  %813 = select i1 %811, float %809, float %808
  %814 = fadd fast float %812, %801
  %815 = fadd fast float %813, %802
  %816 = call float @dx.op.dot3.f32(i32 55, float %814, float %815, float %806, float %814, float %815, float %806)  ; Dot3(ax,ay,az,bx,by,bz)
  %817 = call float @dx.op.unary.f32(i32 25, float %816)  ; Rsqrt(value)
  %818 = fmul fast float %814, %817
  %819 = fmul fast float %815, %817
  %820 = fmul fast float %817, %806
  %821 = lshr i32 %784, %695
  %822 = shl i32 %788, %757
  %823 = select i1 %755, i32 %822, i32 0
  %824 = or i32 %823, %821
  %825 = lshr i32 %788, %695
  %826 = shl i32 %792, %757
  %827 = select i1 %755, i32 %826, i32 0
  %828 = or i32 %827, %825
  %829 = mul i32 %542, %513
  %830 = ashr i32 %829, 5
  %831 = shl nsw i32 %830, 2
  %832 = add i32 %831, %686
  %833 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %832, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %834 = extractvalue %dx.types.ResRet.i32 %833, 0
  %835 = extractvalue %dx.types.ResRet.i32 %833, 1
  %836 = extractvalue %dx.types.ResRet.i32 %833, 2
  %837 = extractvalue %dx.types.ResRet.i32 %833, 3
  %838 = and i32 %829, 31
  %839 = lshr i32 %834, %838
  %840 = icmp ne i32 %838, 0
  %841 = sub i32 0, %829
  %842 = and i32 %841, 31
  %843 = shl i32 %835, %842
  %844 = select i1 %840, i32 %843, i32 0
  %845 = or i32 %844, %839
  %846 = lshr i32 %835, %838
  %847 = shl i32 %836, %842
  %848 = select i1 %840, i32 %847, i32 0
  %849 = or i32 %848, %846
  %850 = lshr i32 %836, %838
  %851 = shl i32 %837, %842
  %852 = select i1 %840, i32 %851, i32 0
  %853 = or i32 %852, %850
  %854 = and i32 %845, %721
  %855 = and i32 %854, %724
  %856 = lshr i32 %854, %511
  %857 = and i32 %856, %724
  %858 = uitofp i32 %855 to float
  %859 = uitofp i32 %857 to float
  %860 = fmul fast float %858, %731
  %861 = fmul fast float %859, %731
  %862 = fadd fast float %860, -1.000000e+00
  %863 = fadd fast float %861, -1.000000e+00
  %864 = call float @dx.op.unary.f32(i32 6, float %862)  ; FAbs(value)
  %865 = fsub fast float 1.000000e+00, %864
  %866 = call float @dx.op.unary.f32(i32 6, float %863)  ; FAbs(value)
  %867 = fsub fast float %865, %866
  %868 = fsub fast float -0.000000e+00, %867
  %869 = call float @dx.op.unary.f32(i32 7, float %868)  ; Saturate(value)
  %870 = fsub fast float -0.000000e+00, %869
  %871 = fcmp fast oge float %862, 0.000000e+00
  %872 = fcmp fast oge float %863, 0.000000e+00
  %873 = select i1 %871, float %870, float %869
  %874 = select i1 %872, float %870, float %869
  %875 = fadd fast float %873, %862
  %876 = fadd fast float %874, %863
  %877 = call float @dx.op.dot3.f32(i32 55, float %875, float %876, float %867, float %875, float %876, float %867)  ; Dot3(ax,ay,az,bx,by,bz)
  %878 = call float @dx.op.unary.f32(i32 25, float %877)  ; Rsqrt(value)
  %879 = fmul fast float %875, %878
  %880 = fmul fast float %876, %878
  %881 = fmul fast float %878, %867
  %882 = lshr i32 %845, %695
  %883 = shl i32 %849, %757
  %884 = select i1 %755, i32 %883, i32 0
  %885 = or i32 %884, %882
  %886 = lshr i32 %849, %695
  %887 = shl i32 %853, %757
  %888 = select i1 %755, i32 %887, i32 0
  %889 = or i32 %888, %886
  %890 = and i32 %500, 15
  %891 = lshr i32 %500, 4
  %892 = and i32 %891, 15
  %893 = icmp eq i32 %767, 32
  %894 = and i32 %767, 31
  %895 = lshr i32 %760, %894
  %896 = icmp ne i32 %894, 0
  %897 = sub nsw i32 0, %767
  %898 = and i32 %897, 31
  %899 = shl i32 %764, %898
  %900 = select i1 %896, i32 %899, i32 0
  %901 = or i32 %900, %895
  %902 = select i1 %893, i32 %764, i32 %901
  %903 = shl i32 1, %890
  %904 = add i32 %903, -1
  %905 = and i32 %902, %904
  %906 = lshr i32 %902, %890
  %907 = shl i32 1, %892
  %908 = add i32 %907, -1
  %909 = and i32 %906, %908
  %910 = icmp eq i32 %767, 32
  %911 = and i32 %767, 31
  %912 = lshr i32 %824, %911
  %913 = icmp ne i32 %911, 0
  %914 = sub nsw i32 0, %767
  %915 = and i32 %914, 31
  %916 = shl i32 %828, %915
  %917 = select i1 %913, i32 %916, i32 0
  %918 = or i32 %917, %912
  %919 = select i1 %910, i32 %828, i32 %918
  %920 = and i32 %919, %904
  %921 = lshr i32 %919, %890
  %922 = and i32 %921, %908
  %923 = icmp eq i32 %767, 32
  %924 = and i32 %767, 31
  %925 = lshr i32 %885, %924
  %926 = icmp ne i32 %924, 0
  %927 = sub nsw i32 0, %767
  %928 = and i32 %927, 31
  %929 = shl i32 %889, %928
  %930 = select i1 %926, i32 %929, i32 0
  %931 = or i32 %930, %925
  %932 = select i1 %923, i32 %889, i32 %931
  %933 = and i32 %932, %904
  %934 = lshr i32 %932, %890
  %935 = and i32 %934, %908
  %936 = icmp eq i32 %515, 0
  br i1 %936, label %987, label %937, !dx.controlflow.hints !81

; <label>:937                                     ; preds = %446
  %938 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %685, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %939 = extractvalue %dx.types.ResRet.i32 %938, 0
  %940 = extractvalue %dx.types.ResRet.i32 %938, 1
  %941 = extractvalue %dx.types.ResRet.i32 %938, 2
  %942 = extractvalue %dx.types.ResRet.i32 %938, 3
  %943 = add i32 %685, 16
  %944 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %478, i32 %943, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %945 = extractvalue %dx.types.ResRet.i32 %944, 0
  %946 = extractvalue %dx.types.ResRet.i32 %944, 1
  %947 = extractvalue %dx.types.ResRet.i32 %944, 2
  %948 = icmp ugt i32 %905, %941
  %949 = icmp ugt i32 %909, %942
  %950 = select i1 %948, i32 %945, i32 0
  %951 = select i1 %949, i32 %946, i32 0
  %952 = shl i32 %947, 23
  %953 = sub nsw i32 1065353216, %952
  %954 = bitcast i32 %953 to float
  %955 = add i32 %939, %905
  %956 = add i32 %955, %950
  %957 = add i32 %940, %909
  %958 = add i32 %957, %951
  %959 = sitofp i32 %956 to float
  %960 = sitofp i32 %958 to float
  %961 = fmul fast float %959, %954
  %962 = fmul fast float %960, %954
  %963 = icmp ugt i32 %920, %941
  %964 = icmp ugt i32 %922, %942
  %965 = select i1 %963, i32 %945, i32 0
  %966 = select i1 %964, i32 %946, i32 0
  %967 = add i32 %939, %920
  %968 = add i32 %967, %965
  %969 = add i32 %940, %922
  %970 = add i32 %969, %966
  %971 = sitofp i32 %968 to float
  %972 = sitofp i32 %970 to float
  %973 = fmul fast float %971, %954
  %974 = fmul fast float %972, %954
  %975 = icmp ugt i32 %933, %941
  %976 = icmp ugt i32 %935, %942
  %977 = select i1 %975, i32 %945, i32 0
  %978 = select i1 %976, i32 %946, i32 0
  %979 = add i32 %939, %933
  %980 = add i32 %979, %977
  %981 = add i32 %940, %935
  %982 = add i32 %981, %978
  %983 = sitofp i32 %980 to float
  %984 = sitofp i32 %982 to float
  %985 = fmul fast float %983, %954
  %986 = fmul fast float %984, %954
  br label %987

; <label>:987                                     ; preds = %937, %446
  %988 = phi float [ 0.000000e+00, %446 ], [ %985, %937 ]
  %989 = phi float [ 0.000000e+00, %446 ], [ %973, %937 ]
  %990 = phi float [ 0.000000e+00, %446 ], [ %961, %937 ]
  %991 = phi float [ 0.000000e+00, %446 ], [ %986, %937 ]
  %992 = phi float [ 0.000000e+00, %446 ], [ %974, %937 ]
  %993 = phi float [ 0.000000e+00, %446 ], [ %962, %937 ]
  %994 = fmul fast float %600, %284
  %995 = call float @dx.op.tertiary.f32(i32 46, float %601, float %287, float %994)  ; FMad(a,b,c)
  %996 = call float @dx.op.tertiary.f32(i32 46, float %602, float %290, float %995)  ; FMad(a,b,c)
  %997 = fadd fast float %996, %466
  %998 = fmul fast float %600, %285
  %999 = call float @dx.op.tertiary.f32(i32 46, float %601, float %288, float %998)  ; FMad(a,b,c)
  %1000 = call float @dx.op.tertiary.f32(i32 46, float %602, float %291, float %999)  ; FMad(a,b,c)
  %1001 = fadd fast float %1000, %468
  %1002 = fmul fast float %600, %286
  %1003 = call float @dx.op.tertiary.f32(i32 46, float %601, float %289, float %1002)  ; FMad(a,b,c)
  %1004 = call float @dx.op.tertiary.f32(i32 46, float %602, float %292, float %1003)  ; FMad(a,b,c)
  %1005 = fadd fast float %1004, %470
  %1006 = fmul fast float %997, %79
  %1007 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %83, float %1006)  ; FMad(a,b,c)
  %1008 = call float @dx.op.tertiary.f32(i32 46, float %1005, float %87, float %1007)  ; FMad(a,b,c)
  %1009 = fadd fast float %1008, %91
  %1010 = fmul fast float %997, %80
  %1011 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %84, float %1010)  ; FMad(a,b,c)
  %1012 = call float @dx.op.tertiary.f32(i32 46, float %1005, float %88, float %1011)  ; FMad(a,b,c)
  %1013 = fadd fast float %1012, %92
  %1014 = fmul fast float %997, %81
  %1015 = call float @dx.op.tertiary.f32(i32 46, float %1001, float %85, float %1014)  ; FMad(a,b,c)
  %1016 = call float @dx.op.tertiary.f32(i32 46, float %1005, float %89, float %1015)  ; FMad(a,b,c)
  %1017 = fadd fast float %1016, %93
  %1018 = fmul fast float %641, %284
  %1019 = call float @dx.op.tertiary.f32(i32 46, float %642, float %287, float %1018)  ; FMad(a,b,c)
  %1020 = call float @dx.op.tertiary.f32(i32 46, float %643, float %290, float %1019)  ; FMad(a,b,c)
  %1021 = fadd fast float %1020, %466
  %1022 = fmul fast float %641, %285
  %1023 = call float @dx.op.tertiary.f32(i32 46, float %642, float %288, float %1022)  ; FMad(a,b,c)
  %1024 = call float @dx.op.tertiary.f32(i32 46, float %643, float %291, float %1023)  ; FMad(a,b,c)
  %1025 = fadd fast float %1024, %468
  %1026 = fmul fast float %641, %286
  %1027 = call float @dx.op.tertiary.f32(i32 46, float %642, float %289, float %1026)  ; FMad(a,b,c)
  %1028 = call float @dx.op.tertiary.f32(i32 46, float %643, float %292, float %1027)  ; FMad(a,b,c)
  %1029 = fadd fast float %1028, %470
  %1030 = fmul fast float %1021, %79
  %1031 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %83, float %1030)  ; FMad(a,b,c)
  %1032 = call float @dx.op.tertiary.f32(i32 46, float %1029, float %87, float %1031)  ; FMad(a,b,c)
  %1033 = fadd fast float %1032, %91
  %1034 = fmul fast float %1021, %80
  %1035 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %84, float %1034)  ; FMad(a,b,c)
  %1036 = call float @dx.op.tertiary.f32(i32 46, float %1029, float %88, float %1035)  ; FMad(a,b,c)
  %1037 = fadd fast float %1036, %92
  %1038 = fmul fast float %1021, %81
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %85, float %1038)  ; FMad(a,b,c)
  %1040 = call float @dx.op.tertiary.f32(i32 46, float %1029, float %89, float %1039)  ; FMad(a,b,c)
  %1041 = fadd fast float %1040, %93
  %1042 = fmul fast float %682, %284
  %1043 = call float @dx.op.tertiary.f32(i32 46, float %683, float %287, float %1042)  ; FMad(a,b,c)
  %1044 = call float @dx.op.tertiary.f32(i32 46, float %684, float %290, float %1043)  ; FMad(a,b,c)
  %1045 = fadd fast float %1044, %466
  %1046 = fmul fast float %682, %285
  %1047 = call float @dx.op.tertiary.f32(i32 46, float %683, float %288, float %1046)  ; FMad(a,b,c)
  %1048 = call float @dx.op.tertiary.f32(i32 46, float %684, float %291, float %1047)  ; FMad(a,b,c)
  %1049 = fadd fast float %1048, %468
  %1050 = fmul fast float %682, %286
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %683, float %289, float %1050)  ; FMad(a,b,c)
  %1052 = call float @dx.op.tertiary.f32(i32 46, float %684, float %292, float %1051)  ; FMad(a,b,c)
  %1053 = fadd fast float %1052, %470
  %1054 = fmul fast float %1045, %79
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %1049, float %83, float %1054)  ; FMad(a,b,c)
  %1056 = call float @dx.op.tertiary.f32(i32 46, float %1053, float %87, float %1055)  ; FMad(a,b,c)
  %1057 = fadd fast float %1056, %91
  %1058 = fmul fast float %1045, %80
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %1049, float %84, float %1058)  ; FMad(a,b,c)
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %1053, float %88, float %1059)  ; FMad(a,b,c)
  %1061 = fadd fast float %1060, %92
  %1062 = fmul fast float %1045, %81
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %1049, float %85, float %1062)  ; FMad(a,b,c)
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %1053, float %89, float %1063)  ; FMad(a,b,c)
  %1065 = fadd fast float %1064, %93
  %1066 = fmul fast float %49, 2.560000e+02
  %1067 = fmul fast float %50, 2.560000e+02
  %1068 = fdiv fast float 1.000000e+00, %1017
  %1069 = fdiv fast float 1.000000e+00, %1041
  %1070 = fdiv fast float 1.000000e+00, %1065
  %1071 = fmul fast float %1068, %1009
  %1072 = fmul fast float %1068, %1013
  %1073 = fmul fast float %1069, %1033
  %1074 = fmul fast float %1069, %1037
  %1075 = fmul fast float %1070, %1057
  %1076 = fmul fast float %1070, %1061
  %1077 = fsub fast float %1076, %1074
  %1078 = fsub fast float %1072, %1076
  %1079 = fsub fast float %1074, %1072
  %1080 = fsub fast float %1073, %1075
  %1081 = fsub fast float %1075, %1071
  %1082 = fsub fast float %1071, %1073
  %1083 = fsub fast float %1066, %1073
  %1084 = fsub fast float %1066, %1075
  %1085 = fsub fast float %1066, %1071
  %1086 = fmul fast float %1077, %1083
  %1087 = fmul fast float %1078, %1084
  %1088 = fmul fast float %1079, %1085
  %1089 = fsub fast float %1067, %1074
  %1090 = fsub fast float %1067, %1076
  %1091 = fsub fast float %1067, %1072
  %1092 = fmul fast float %1080, %1089
  %1093 = fmul fast float %1081, %1090
  %1094 = fmul fast float %1082, %1091
  %1095 = fadd fast float %1086, %1092
  %1096 = fadd fast float %1087, %1093
  %1097 = fadd fast float %1088, %1094
  %1098 = fmul fast float %1096, %1069
  %1099 = fmul fast float %1097, %1070
  %1100 = call float @dx.op.dot3.f32(i32 55, float %1095, float %1096, float %1097, float %1068, float %1069, float %1070)  ; Dot3(ax,ay,az,bx,by,bz)
  %1101 = fdiv fast float 1.000000e+00, %1100
  %1102 = fmul fast float %1101, %1068
  %1103 = fmul fast float %1102, %1095
  %1104 = fmul fast float %1098, %1101
  %1105 = fmul fast float %1099, %1101
  %1106 = fmul fast float %1079, %1070
  %1107 = fmul fast float %1082, %1070
  %1108 = call float @dx.op.dot3.f32(i32 55, float %1077, float %1078, float %1079, float %1068, float %1069, float %1070)  ; Dot3(ax,ay,az,bx,by,bz)
  %1109 = call float @dx.op.dot3.f32(i32 55, float %1080, float %1081, float %1082, float %1068, float %1069, float %1070)  ; Dot3(ax,ay,az,bx,by,bz)
  %1110 = fmul fast float %1100, %1069
  %1111 = fmul fast float %1110, %1078
  %1112 = fmul fast float %1106, %1100
  %1113 = fmul fast float %1098, %1108
  %1114 = fmul fast float %1099, %1108
  %1115 = fsub fast float %1111, %1113
  %1116 = fsub fast float %1112, %1114
  %1117 = fmul fast float %1101, %1101
  %1118 = fmul fast float %1117, 2.560000e+02
  %1119 = fmul fast float %1118, %1115
  %1120 = fmul fast float %1118, %1116
  %1121 = fmul fast float %1110, %1081
  %1122 = fmul fast float %1107, %1100
  %1123 = fmul fast float %1098, %1109
  %1124 = fmul fast float %1099, %1109
  %1125 = fsub fast float %1121, %1123
  %1126 = fsub fast float %1122, %1124
  %1127 = fmul fast float %1118, %1125
  %1128 = fmul fast float %1118, %1126
  %1129 = fmul fast float %751, %1103
  %1130 = fmul fast float %752, %1103
  %1131 = fmul fast float %753, %1103
  %1132 = fmul fast float %818, %1104
  %1133 = fmul fast float %819, %1104
  %1134 = fmul fast float %820, %1104
  %1135 = fmul fast float %879, %1105
  %1136 = fmul fast float %880, %1105
  %1137 = fmul fast float %881, %1105
  %1138 = fadd fast float %1132, %1135
  %1139 = fadd fast float %1138, %1129
  %1140 = fadd fast float %1133, %1136
  %1141 = fadd fast float %1140, %1130
  %1142 = fadd fast float %1134, %1137
  %1143 = fadd fast float %1142, %1131
  %1144 = call float @dx.op.dot3.f32(i32 55, float %1139, float %1141, float %1143, float %1139, float %1141, float %1143)  ; Dot3(ax,ay,az,bx,by,bz)
  %1145 = call float @dx.op.unary.f32(i32 25, float %1144)  ; Rsqrt(value)
  %1146 = fmul fast float %1139, %1145
  %1147 = fmul fast float %1141, %1145
  %1148 = fmul fast float %1143, %1145
  %1149 = fsub fast float %989, %990
  %1150 = fsub fast float %992, %993
  %1151 = fsub fast float %988, %990
  %1152 = fsub fast float %991, %993
  br i1 %936, label %1153, label %1166

; <label>:1153                                    ; preds = %987
  %1154 = fmul fast float %1146, %298
  %1155 = fmul fast float %1147, %298
  %1156 = fmul fast float %1148, %298
  %1157 = fmul fast float %1154, %284
  %1158 = call float @dx.op.tertiary.f32(i32 46, float %1155, float %287, float %1157)  ; FMad(a,b,c)
  %1159 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %290, float %1158)  ; FMad(a,b,c)
  %1160 = fmul fast float %1154, %285
  %1161 = call float @dx.op.tertiary.f32(i32 46, float %1155, float %288, float %1160)  ; FMad(a,b,c)
  %1162 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %291, float %1161)  ; FMad(a,b,c)
  %1163 = fmul fast float %1154, %286
  %1164 = call float @dx.op.tertiary.f32(i32 46, float %1155, float %289, float %1163)  ; FMad(a,b,c)
  %1165 = call float @dx.op.tertiary.f32(i32 46, float %1156, float %292, float %1164)  ; FMad(a,b,c)
  br label %1302

; <label>:1166                                    ; preds = %987
  %1167 = fsub fast float %638, %597
  %1168 = fmul fast float %593, %1167
  %1169 = fsub fast float %639, %598
  %1170 = fmul fast float %593, %1169
  %1171 = fsub fast float %640, %599
  %1172 = fmul fast float %593, %1171
  %1173 = fsub fast float %679, %597
  %1174 = fmul fast float %593, %1173
  %1175 = fsub fast float %680, %598
  %1176 = fmul fast float %593, %1175
  %1177 = fsub fast float %681, %599
  %1178 = fmul fast float %593, %1177
  %1179 = call float @dx.op.unary.f32(i32 6, float %1149)  ; FAbs(value)
  %1180 = call float @dx.op.unary.f32(i32 6, float %1151)  ; FAbs(value)
  %1181 = fadd fast float %1180, %1179
  %1182 = fcmp fast ogt float %1181, 0x3EB0C6F7A0000000
  br i1 %1182, label %1202, label %1183

; <label>:1183                                    ; preds = %1166
  %1184 = fcmp fast oge float %1148, 0.000000e+00
  %1185 = select i1 %1184, float 1.000000e+00, float -1.000000e+00
  %1186 = fadd fast float %1185, %1148
  %1187 = fdiv fast float 1.000000e+00, %1186
  %1188 = fsub fast float -0.000000e+00, %1187
  %1189 = fmul fast float %1146, %1147
  %1190 = fmul fast float %1189, %1188
  %1191 = fmul fast float %1146, %1146
  %1192 = fmul fast float %1191, %1185
  %1193 = fmul fast float %1192, %1188
  %1194 = fadd fast float %1193, 1.000000e+00
  %1195 = fmul fast float %1190, %1185
  %1196 = fmul fast float %1146, %1185
  %1197 = fsub fast float -0.000000e+00, %1196
  %1198 = fmul fast float %1147, %1147
  %1199 = fmul fast float %1198, %1188
  %1200 = fadd fast float %1199, %1185
  %1201 = fsub fast float -0.000000e+00, %1147
  br label %1259

; <label>:1202                                    ; preds = %1166
  %1203 = fmul fast float %1147, %1178
  %1204 = fmul fast float %1148, %1176
  %1205 = fsub fast float %1203, %1204
  %1206 = fmul fast float %1148, %1174
  %1207 = fmul fast float %1146, %1178
  %1208 = fsub fast float %1206, %1207
  %1209 = fmul fast float %1146, %1176
  %1210 = fmul fast float %1147, %1174
  %1211 = fsub fast float %1209, %1210
  %1212 = fmul fast float %1148, %1170
  %1213 = fmul fast float %1147, %1172
  %1214 = fsub fast float %1212, %1213
  %1215 = fmul fast float %1146, %1172
  %1216 = fmul fast float %1148, %1168
  %1217 = fsub fast float %1215, %1216
  %1218 = fmul fast float %1147, %1168
  %1219 = fmul fast float %1146, %1170
  %1220 = fsub fast float %1218, %1219
  %1221 = fmul fast float %1205, %1149
  %1222 = fmul fast float %1208, %1149
  %1223 = fmul fast float %1211, %1149
  %1224 = fmul fast float %1214, %1151
  %1225 = fmul fast float %1217, %1151
  %1226 = fmul fast float %1220, %1151
  %1227 = fadd fast float %1221, %1224
  %1228 = fadd fast float %1222, %1225
  %1229 = fadd fast float %1223, %1226
  %1230 = fmul fast float %1205, %1150
  %1231 = fmul fast float %1208, %1150
  %1232 = fmul fast float %1211, %1150
  %1233 = fmul fast float %1214, %1152
  %1234 = fmul fast float %1217, %1152
  %1235 = fmul fast float %1220, %1152
  %1236 = fadd fast float %1230, %1233
  %1237 = fadd fast float %1231, %1234
  %1238 = fadd fast float %1232, %1235
  %1239 = call float @dx.op.dot3.f32(i32 55, float %1227, float %1228, float %1229, float %1227, float %1228, float %1229)  ; Dot3(ax,ay,az,bx,by,bz)
  %1240 = call float @dx.op.unary.f32(i32 25, float %1239)  ; Rsqrt(value)
  %1241 = fmul fast float %1240, %1227
  %1242 = fmul fast float %1240, %1228
  %1243 = fmul fast float %1240, %1229
  %1244 = fmul fast float %1243, %1147
  %1245 = fmul fast float %1242, %1148
  %1246 = fsub fast float %1244, %1245
  %1247 = fmul fast float %1241, %1148
  %1248 = fmul fast float %1243, %1146
  %1249 = fsub fast float %1247, %1248
  %1250 = fmul fast float %1242, %1146
  %1251 = fmul fast float %1241, %1147
  %1252 = fsub fast float %1250, %1251
  %1253 = call float @dx.op.dot3.f32(i32 55, float %1236, float %1237, float %1238, float %1246, float %1249, float %1252)  ; Dot3(ax,ay,az,bx,by,bz)
  %1254 = fcmp fast olt float %1253, 0.000000e+00
  %1255 = select i1 %1254, float -1.000000e+00, float 1.000000e+00
  %1256 = fmul fast float %1246, %1255
  %1257 = fmul fast float %1249, %1255
  %1258 = fmul fast float %1252, %1255
  br label %1259

; <label>:1259                                    ; preds = %1202, %1183
  %1260 = phi float [ %1241, %1202 ], [ %1194, %1183 ]
  %1261 = phi float [ %1242, %1202 ], [ %1195, %1183 ]
  %1262 = phi float [ %1243, %1202 ], [ %1197, %1183 ]
  %1263 = phi float [ %1256, %1202 ], [ %1190, %1183 ]
  %1264 = phi float [ %1257, %1202 ], [ %1200, %1183 ]
  %1265 = phi float [ %1258, %1202 ], [ %1201, %1183 ]
  %1266 = fmul fast float %284, %296
  %1267 = fmul fast float %285, %296
  %1268 = fmul fast float %286, %296
  %1269 = fmul fast float %287, %297
  %1270 = fmul fast float %288, %297
  %1271 = fmul fast float %289, %297
  %1272 = fmul fast float %298, %290
  %1273 = fmul fast float %298, %291
  %1274 = fmul fast float %298, %292
  %1275 = fmul fast float %1260, %1266
  %1276 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1269, float %1275)  ; FMad(a,b,c)
  %1277 = call float @dx.op.tertiary.f32(i32 46, float %1262, float %1272, float %1276)  ; FMad(a,b,c)
  %1278 = fmul fast float %1260, %1267
  %1279 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1270, float %1278)  ; FMad(a,b,c)
  %1280 = call float @dx.op.tertiary.f32(i32 46, float %1262, float %1273, float %1279)  ; FMad(a,b,c)
  %1281 = fmul fast float %1260, %1268
  %1282 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1271, float %1281)  ; FMad(a,b,c)
  %1283 = call float @dx.op.tertiary.f32(i32 46, float %1262, float %1274, float %1282)  ; FMad(a,b,c)
  %1284 = fmul fast float %1263, %1266
  %1285 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1269, float %1284)  ; FMad(a,b,c)
  %1286 = call float @dx.op.tertiary.f32(i32 46, float %1265, float %1272, float %1285)  ; FMad(a,b,c)
  %1287 = fmul fast float %1263, %1267
  %1288 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1270, float %1287)  ; FMad(a,b,c)
  %1289 = call float @dx.op.tertiary.f32(i32 46, float %1265, float %1273, float %1288)  ; FMad(a,b,c)
  %1290 = fmul fast float %1263, %1268
  %1291 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1271, float %1290)  ; FMad(a,b,c)
  %1292 = call float @dx.op.tertiary.f32(i32 46, float %1265, float %1274, float %1291)  ; FMad(a,b,c)
  %1293 = fmul fast float %1146, %1266
  %1294 = call float @dx.op.tertiary.f32(i32 46, float %1147, float %1269, float %1293)  ; FMad(a,b,c)
  %1295 = call float @dx.op.tertiary.f32(i32 46, float %1148, float %1272, float %1294)  ; FMad(a,b,c)
  %1296 = fmul fast float %1146, %1267
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %1147, float %1270, float %1296)  ; FMad(a,b,c)
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %1148, float %1273, float %1297)  ; FMad(a,b,c)
  %1299 = fmul fast float %1146, %1268
  %1300 = call float @dx.op.tertiary.f32(i32 46, float %1147, float %1271, float %1299)  ; FMad(a,b,c)
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %1148, float %1274, float %1300)  ; FMad(a,b,c)
  br label %1302

; <label>:1302                                    ; preds = %1259, %1153
  %1303 = phi float [ %1277, %1259 ], [ 0.000000e+00, %1153 ]
  %1304 = phi float [ %1280, %1259 ], [ 0.000000e+00, %1153 ]
  %1305 = phi float [ %1283, %1259 ], [ 0.000000e+00, %1153 ]
  %1306 = phi float [ %1286, %1259 ], [ 0.000000e+00, %1153 ]
  %1307 = phi float [ %1289, %1259 ], [ 0.000000e+00, %1153 ]
  %1308 = phi float [ %1292, %1259 ], [ 0.000000e+00, %1153 ]
  %1309 = phi float [ %1295, %1259 ], [ %1159, %1153 ]
  %1310 = phi float [ %1298, %1259 ], [ %1162, %1153 ]
  %1311 = phi float [ %1301, %1259 ], [ %1165, %1153 ]
  %1312 = fmul fast float %1104, %1149
  %1313 = fmul fast float %1104, %1150
  %1314 = fmul fast float %1105, %1151
  %1315 = fmul fast float %1105, %1152
  %1316 = fadd fast float %1314, %990
  %1317 = fadd fast float %1316, %1312
  %1318 = fadd fast float %1315, %993
  %1319 = fadd fast float %1318, %1313
  %1320 = fmul fast float %1119, %1149
  %1321 = fmul fast float %1119, %1150
  %1322 = fmul fast float %1120, %1151
  %1323 = fmul fast float %1120, %1152
  %1324 = fadd fast float %1320, %1322
  %1325 = fadd fast float %1321, %1323
  %1326 = fmul fast float %1127, %1149
  %1327 = fmul fast float %1127, %1150
  %1328 = fmul fast float %1128, %1151
  %1329 = fmul fast float %1128, %1152
  %1330 = fadd fast float %1326, %1328
  %1331 = fadd fast float %1327, %1329
  %1332 = fmul fast float %1103, %600
  %1333 = fmul fast float %1103, %601
  %1334 = fmul fast float %1103, %602
  %1335 = fmul fast float %1104, %641
  %1336 = fmul fast float %1104, %642
  %1337 = fmul fast float %1104, %643
  %1338 = fmul fast float %1105, %682
  %1339 = fmul fast float %1105, %683
  %1340 = fmul fast float %1105, %684
  %1341 = fadd fast float %1335, %1338
  %1342 = fadd fast float %1341, %1332
  %1343 = fadd fast float %1336, %1339
  %1344 = fadd fast float %1343, %1333
  %1345 = fadd fast float %1337, %1340
  %1346 = fadd fast float %1345, %1334
  %1347 = fmul fast float %1342, %447
  %1348 = call float @dx.op.tertiary.f32(i32 46, float %1344, float %450, float %1347)  ; FMad(a,b,c)
  %1349 = call float @dx.op.tertiary.f32(i32 46, float %1346, float %453, float %1348)  ; FMad(a,b,c)
  %1350 = fadd fast float %462, %115
  %1351 = fadd fast float %1350, %456
  %1352 = fadd fast float %1351, %1349
  %1353 = fmul fast float %1342, %448
  %1354 = call float @dx.op.tertiary.f32(i32 46, float %1344, float %451, float %1353)  ; FMad(a,b,c)
  %1355 = call float @dx.op.tertiary.f32(i32 46, float %1346, float %454, float %1354)  ; FMad(a,b,c)
  %1356 = fadd fast float %463, %116
  %1357 = fadd fast float %1356, %457
  %1358 = fadd fast float %1357, %1355
  %1359 = fmul fast float %1342, %449
  %1360 = call float @dx.op.tertiary.f32(i32 46, float %1344, float %452, float %1359)  ; FMad(a,b,c)
  %1361 = call float @dx.op.tertiary.f32(i32 46, float %1346, float %455, float %1360)  ; FMad(a,b,c)
  %1362 = fadd fast float %464, %117
  %1363 = fadd fast float %1362, %458
  %1364 = fadd fast float %1363, %1361
  %1365 = fmul fast float %1352, %95
  %1366 = call float @dx.op.tertiary.f32(i32 46, float %1358, float %100, float %1365)  ; FMad(a,b,c)
  %1367 = call float @dx.op.tertiary.f32(i32 46, float %1364, float %105, float %1366)  ; FMad(a,b,c)
  %1368 = fadd fast float %1367, %110
  %1369 = fmul fast float %1352, %96
  %1370 = call float @dx.op.tertiary.f32(i32 46, float %1358, float %101, float %1369)  ; FMad(a,b,c)
  %1371 = call float @dx.op.tertiary.f32(i32 46, float %1364, float %106, float %1370)  ; FMad(a,b,c)
  %1372 = fadd fast float %1371, %111
  %1373 = fmul fast float %1352, %97
  %1374 = call float @dx.op.tertiary.f32(i32 46, float %1358, float %102, float %1373)  ; FMad(a,b,c)
  %1375 = call float @dx.op.tertiary.f32(i32 46, float %1364, float %107, float %1374)  ; FMad(a,b,c)
  %1376 = fadd fast float %1375, %112
  %1377 = fmul fast float %1352, %98
  %1378 = call float @dx.op.tertiary.f32(i32 46, float %1358, float %103, float %1377)  ; FMad(a,b,c)
  %1379 = call float @dx.op.tertiary.f32(i32 46, float %1364, float %108, float %1378)  ; FMad(a,b,c)
  %1380 = fadd fast float %1379, %113
  %1381 = fmul fast float %1103, %997
  %1382 = fmul fast float %1103, %1001
  %1383 = fmul fast float %1103, %1005
  %1384 = fmul fast float %1104, %1021
  %1385 = fmul fast float %1104, %1025
  %1386 = fmul fast float %1104, %1029
  %1387 = fmul fast float %1105, %1045
  %1388 = fmul fast float %1105, %1049
  %1389 = fmul fast float %1105, %1053
  %1390 = fadd fast float %1384, %1387
  %1391 = fadd fast float %1390, %1381
  %1392 = fadd fast float %1385, %1388
  %1393 = fadd fast float %1392, %1382
  %1394 = fadd fast float %1386, %1389
  %1395 = fadd fast float %1394, %1383
  %1396 = fmul fast float %1103, %1017
  %1397 = fmul fast float %1104, %1041
  %1398 = fmul fast float %1105, %1065
  %1399 = fadd fast float %1397, %1398
  %1400 = fadd fast float %1399, %1396
  %1401 = fsub fast float %49, %65
  %1402 = fsub fast float %50, %66
  %1403 = fmul fast float %1401, %68
  %1404 = fmul fast float %1402, %69
  %1405 = fadd fast float %1403, -5.000000e-01
  %1406 = fadd fast float %1404, -5.000000e-01
  %1407 = fmul fast float %1405, 2.000000e+00
  %1408 = fmul fast float %1406, -2.000000e+00
  %1409 = fmul fast float %1407, %1400
  %1410 = fmul fast float %1408, %1400
  %1411 = fmul fast float %1400, %128
  br label %1412

; <label>:1412                                    ; preds = %1302, %0
  %1413 = phi float [ %1409, %1302 ], [ 0.000000e+00, %0 ]
  %1414 = phi float [ %1410, %1302 ], [ 0.000000e+00, %0 ]
  %1415 = phi float [ %1411, %1302 ], [ 0.000000e+00, %0 ]
  %1416 = phi float [ %1400, %1302 ], [ 0.000000e+00, %0 ]
  %1417 = phi float [ %1368, %1302 ], [ 0.000000e+00, %0 ]
  %1418 = phi float [ %1372, %1302 ], [ 0.000000e+00, %0 ]
  %1419 = phi float [ %1376, %1302 ], [ 0.000000e+00, %0 ]
  %1420 = phi float [ %1380, %1302 ], [ 0.000000e+00, %0 ]
  %1421 = phi float [ %1303, %1302 ], [ 1.000000e+00, %0 ]
  %1422 = phi float [ %1304, %1302 ], [ 0.000000e+00, %0 ]
  %1423 = phi float [ %1305, %1302 ], [ 0.000000e+00, %0 ]
  %1424 = phi float [ %1306, %1302 ], [ 0.000000e+00, %0 ]
  %1425 = phi float [ %1307, %1302 ], [ 1.000000e+00, %0 ]
  %1426 = phi float [ %1308, %1302 ], [ 0.000000e+00, %0 ]
  %1427 = phi float [ %1309, %1302 ], [ 0.000000e+00, %0 ]
  %1428 = phi float [ %1310, %1302 ], [ 0.000000e+00, %0 ]
  %1429 = phi float [ %1311, %1302 ], [ 1.000000e+00, %0 ]
  %1430 = phi float [ %1391, %1302 ], [ 0.000000e+00, %0 ]
  %1431 = phi float [ %1393, %1302 ], [ 0.000000e+00, %0 ]
  %1432 = phi float [ %1395, %1302 ], [ 0.000000e+00, %0 ]
  %1433 = phi i32 [ %152, %1302 ], [ 0, %0 ]
  %1434 = phi float [ %1325, %1302 ], [ 0.000000e+00, %0 ]
  %1435 = phi float [ %1324, %1302 ], [ 0.000000e+00, %0 ]
  %1436 = phi float [ %1331, %1302 ], [ 0.000000e+00, %0 ]
  %1437 = phi float [ %1330, %1302 ], [ 0.000000e+00, %0 ]
  %1438 = phi float [ %1319, %1302 ], [ 0.000000e+00, %0 ]
  %1439 = phi float [ %1317, %1302 ], [ 0.000000e+00, %0 ]
  %1440 = fsub fast float %1430, %56
  %1441 = fsub fast float %1431, %57
  %1442 = fsub fast float %1432, %58
  %1443 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 144)  ; CBufferLoadLegacy(handle,regIndex)
  %1444 = extractvalue %dx.types.CBufRet.f32 %1443, 0
  %1445 = call float @dx.op.unary.f32(i32 21, float %1444)  ; Exp(value)
  %1446 = fmul fast float %1445, %1437
  %1447 = fmul fast float %1445, %1436
  %1448 = fmul fast float %1445, %1435
  %1449 = fmul fast float %1445, %1434
  %1450 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1451 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1452 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1450, %dx.types.Handle %1451, float %1439, float %1438, float undef, float undef, i32 0, i32 0, i32 undef, float %1448, float %1449, float undef, float %1446, float %1447, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1453 = extractvalue %dx.types.ResRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.ResRet.f32 %1452, 1
  %1455 = fmul fast float %1453, 2.000000e+00
  %1456 = fmul fast float %1454, 2.000000e+00
  %1457 = fadd fast float %1455, -1.000000e+00
  %1458 = fadd fast float %1456, -1.000000e+00
  %1459 = call float @dx.op.dot2.f32(i32 54, float %1457, float %1458, float %1457, float %1458)  ; Dot2(ax,ay,bx,by)
  %1460 = fsub fast float 1.000000e+00, %1459
  %1461 = call float @dx.op.unary.f32(i32 7, float %1460)  ; Saturate(value)
  %1462 = call float @dx.op.unary.f32(i32 24, float %1461)  ; Sqrt(value)
  %1463 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1464 = extractvalue %dx.types.CBufRet.f32 %1463, 0
  %1465 = extractvalue %dx.types.CBufRet.f32 %1463, 1
  %1466 = extractvalue %dx.types.CBufRet.f32 %1463, 2
  %1467 = fmul fast float %1464, %1457
  %1468 = fmul fast float %1465, %1458
  %1469 = fmul fast float %1466, %1462
  %1470 = fadd fast float %1469, 1.000000e+00
  %1471 = fmul fast float %1439, 5.000000e+01
  %1472 = fmul fast float %1438, 5.000000e+01
  %1473 = fmul fast float %1435, 5.000000e+01
  %1474 = fmul fast float %1434, 5.000000e+01
  %1475 = fmul fast float %1437, 5.000000e+01
  %1476 = fmul fast float %1436, 5.000000e+01
  %1477 = fmul fast float %1445, %1475
  %1478 = fmul fast float %1445, %1476
  %1479 = fmul fast float %1445, %1473
  %1480 = fmul fast float %1445, %1474
  %1481 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1482 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1483 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1481, %dx.types.Handle %1482, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1484 = extractvalue %dx.types.ResRet.f32 %1483, 0
  %1485 = extractvalue %dx.types.ResRet.f32 %1483, 1
  %1486 = fmul fast float %1484, 2.000000e+00
  %1487 = fmul fast float %1485, 2.000000e+00
  %1488 = fadd fast float %1486, -1.000000e+00
  %1489 = fadd fast float %1487, -1.000000e+00
  %1490 = call float @dx.op.dot2.f32(i32 54, float %1488, float %1489, float %1488, float %1489)  ; Dot2(ax,ay,bx,by)
  %1491 = fsub fast float 1.000000e+00, %1490
  %1492 = call float @dx.op.unary.f32(i32 7, float %1491)  ; Saturate(value)
  %1493 = call float @dx.op.unary.f32(i32 24, float %1492)  ; Sqrt(value)
  %1494 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1495 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1496 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1494, %dx.types.Handle %1495, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1497 = extractvalue %dx.types.ResRet.f32 %1496, 0
  %1498 = extractvalue %dx.types.ResRet.f32 %1496, 1
  %1499 = fmul fast float %1497, 2.000000e+00
  %1500 = fmul fast float %1498, 2.000000e+00
  %1501 = fadd fast float %1499, -1.000000e+00
  %1502 = fadd fast float %1500, -1.000000e+00
  %1503 = call float @dx.op.dot2.f32(i32 54, float %1501, float %1502, float %1501, float %1502)  ; Dot2(ax,ay,bx,by)
  %1504 = fsub fast float 1.000000e+00, %1503
  %1505 = call float @dx.op.unary.f32(i32 7, float %1504)  ; Saturate(value)
  %1506 = call float @dx.op.unary.f32(i32 24, float %1505)  ; Sqrt(value)
  %1507 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1508 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1509 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1507, %dx.types.Handle %1508, float %1439, float %1438, float undef, float undef, i32 0, i32 0, i32 undef, float %1448, float %1449, float undef, float %1446, float %1447, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1510 = extractvalue %dx.types.ResRet.f32 %1509, 0
  %1511 = extractvalue %dx.types.ResRet.f32 %1509, 1
  %1512 = extractvalue %dx.types.ResRet.f32 %1509, 2
  %1513 = extractvalue %dx.types.ResRet.f32 %1509, 3
  %1514 = fsub fast float %1501, %1488
  %1515 = fsub fast float %1502, %1489
  %1516 = fsub fast float %1506, %1493
  %1517 = fmul fast float %1510, %1514
  %1518 = fmul fast float %1510, %1515
  %1519 = fmul fast float %1510, %1516
  %1520 = fadd fast float %1517, %1488
  %1521 = fadd fast float %1518, %1489
  %1522 = fadd fast float %1519, %1493
  %1523 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1524 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1525 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1523, %dx.types.Handle %1524, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1526 = extractvalue %dx.types.ResRet.f32 %1525, 0
  %1527 = extractvalue %dx.types.ResRet.f32 %1525, 1
  %1528 = fmul fast float %1526, 2.000000e+00
  %1529 = fmul fast float %1527, 2.000000e+00
  %1530 = fadd fast float %1528, -1.000000e+00
  %1531 = fadd fast float %1529, -1.000000e+00
  %1532 = call float @dx.op.dot2.f32(i32 54, float %1530, float %1531, float %1530, float %1531)  ; Dot2(ax,ay,bx,by)
  %1533 = fsub fast float 1.000000e+00, %1532
  %1534 = call float @dx.op.unary.f32(i32 7, float %1533)  ; Saturate(value)
  %1535 = call float @dx.op.unary.f32(i32 24, float %1534)  ; Sqrt(value)
  %1536 = fsub fast float %1530, %1520
  %1537 = fsub fast float %1531, %1521
  %1538 = fsub fast float %1535, %1522
  %1539 = fmul fast float %1536, %1511
  %1540 = fmul fast float %1537, %1511
  %1541 = fmul fast float %1538, %1511
  %1542 = fadd fast float %1539, %1520
  %1543 = fadd fast float %1540, %1521
  %1544 = fadd fast float %1541, %1522
  %1545 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1546 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1547 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1545, %dx.types.Handle %1546, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1548 = extractvalue %dx.types.ResRet.f32 %1547, 0
  %1549 = extractvalue %dx.types.ResRet.f32 %1547, 1
  %1550 = fmul fast float %1548, 2.000000e+00
  %1551 = fmul fast float %1549, 2.000000e+00
  %1552 = fadd fast float %1550, -1.000000e+00
  %1553 = fadd fast float %1551, -1.000000e+00
  %1554 = call float @dx.op.dot2.f32(i32 54, float %1552, float %1553, float %1552, float %1553)  ; Dot2(ax,ay,bx,by)
  %1555 = fsub fast float 1.000000e+00, %1554
  %1556 = call float @dx.op.unary.f32(i32 7, float %1555)  ; Saturate(value)
  %1557 = call float @dx.op.unary.f32(i32 24, float %1556)  ; Sqrt(value)
  %1558 = fsub fast float %1552, %1542
  %1559 = fsub fast float %1553, %1543
  %1560 = fsub fast float %1557, %1544
  %1561 = fmul fast float %1558, %1512
  %1562 = fmul fast float %1559, %1512
  %1563 = fmul fast float %1560, %1512
  %1564 = fadd fast float %1561, %1542
  %1565 = fadd fast float %1562, %1543
  %1566 = fadd fast float %1563, %1544
  %1567 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1568 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1569 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1567, %dx.types.Handle %1568, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1570 = extractvalue %dx.types.ResRet.f32 %1569, 0
  %1571 = extractvalue %dx.types.ResRet.f32 %1569, 1
  %1572 = fmul fast float %1570, 2.000000e+00
  %1573 = fmul fast float %1571, 2.000000e+00
  %1574 = fadd fast float %1572, -1.000000e+00
  %1575 = fadd fast float %1573, -1.000000e+00
  %1576 = call float @dx.op.dot2.f32(i32 54, float %1574, float %1575, float %1574, float %1575)  ; Dot2(ax,ay,bx,by)
  %1577 = fsub fast float 1.000000e+00, %1576
  %1578 = call float @dx.op.unary.f32(i32 7, float %1577)  ; Saturate(value)
  %1579 = call float @dx.op.unary.f32(i32 24, float %1578)  ; Sqrt(value)
  %1580 = fsub fast float %1574, %1564
  %1581 = fsub fast float %1575, %1565
  %1582 = fsub fast float %1579, %1566
  %1583 = fmul fast float %1580, %1513
  %1584 = fmul fast float %1581, %1513
  %1585 = fmul fast float %1582, %1513
  %1586 = fadd fast float %1583, %1564
  %1587 = fadd fast float %1584, %1565
  %1588 = fadd fast float %1585, %1566
  %1589 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1590 = extractvalue %dx.types.CBufRet.f32 %1589, 0
  %1591 = extractvalue %dx.types.CBufRet.f32 %1589, 1
  %1592 = extractvalue %dx.types.CBufRet.f32 %1589, 2
  %1593 = fmul fast float %1588, %1592
  %1594 = fmul fast float %1590, %1586
  %1595 = fsub fast float -0.000000e+00, %1594
  %1596 = fmul fast float %1591, %1587
  %1597 = fsub fast float -0.000000e+00, %1596
  %1598 = call float @dx.op.dot3.f32(i32 55, float %1467, float %1468, float %1470, float %1595, float %1597, float %1593)  ; Dot3(ax,ay,az,bx,by,bz)
  %1599 = fmul fast float %1598, %1467
  %1600 = fmul fast float %1598, %1468
  %1601 = fmul fast float %1470, %1595
  %1602 = fmul fast float %1470, %1597
  %1603 = fsub fast float %1599, %1601
  %1604 = fsub fast float %1600, %1602
  %1605 = fsub fast float %1598, %1593
  %1606 = fmul fast float %1603, %74
  %1607 = fmul fast float %1604, %74
  %1608 = fmul fast float %1470, %74
  %1609 = fmul fast float %1608, %1605
  %1610 = fadd fast float %1606, %71
  %1611 = fadd fast float %1607, %72
  %1612 = fadd fast float %1609, %73
  %1613 = call float @dx.op.dot3.f32(i32 55, float %1610, float %1611, float %1612, float %1610, float %1611, float %1612)  ; Dot3(ax,ay,az,bx,by,bz)
  %1614 = call float @dx.op.unary.f32(i32 25, float %1613)  ; Rsqrt(value)
  %1615 = fmul fast float %1610, %1614
  %1616 = fmul fast float %1611, %1614
  %1617 = fmul fast float %1612, %1614
  %1618 = fmul fast float %1615, %1421
  %1619 = call float @dx.op.tertiary.f32(i32 46, float %1616, float %1424, float %1618)  ; FMad(a,b,c)
  %1620 = call float @dx.op.tertiary.f32(i32 46, float %1617, float %1427, float %1619)  ; FMad(a,b,c)
  %1621 = fmul fast float %1615, %1422
  %1622 = call float @dx.op.tertiary.f32(i32 46, float %1616, float %1425, float %1621)  ; FMad(a,b,c)
  %1623 = call float @dx.op.tertiary.f32(i32 46, float %1617, float %1428, float %1622)  ; FMad(a,b,c)
  %1624 = fmul fast float %1615, %1423
  %1625 = call float @dx.op.tertiary.f32(i32 46, float %1616, float %1426, float %1624)  ; FMad(a,b,c)
  %1626 = call float @dx.op.tertiary.f32(i32 46, float %1617, float %1429, float %1625)  ; FMad(a,b,c)
  %1627 = call float @dx.op.dot3.f32(i32 55, float %1620, float %1623, float %1626, float %1620, float %1623, float %1626)  ; Dot3(ax,ay,az,bx,by,bz)
  %1628 = call float @dx.op.unary.f32(i32 25, float %1627)  ; Rsqrt(value)
  %1629 = fmul fast float %1628, %1620
  %1630 = fmul fast float %1628, %1623
  %1631 = fmul fast float %1628, %1626
  %1632 = extractvalue %dx.types.CBufRet.f32 %1589, 3
  %1633 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1634 = extractvalue %dx.types.CBufRet.f32 %1633, 0
  %1635 = extractvalue %dx.types.CBufRet.f32 %1633, 1
  %1636 = extractvalue %dx.types.CBufRet.f32 %1633, 2
  %1637 = fmul fast float %1634, %1632
  %1638 = fmul fast float %1635, %1632
  %1639 = fmul fast float %1636, %1632
  %1640 = fmul fast float %1439, 0x3FD3333340000000
  %1641 = fmul fast float %1438, 0x3FD3333340000000
  %1642 = fmul fast float %1435, 0x3FD3333340000000
  %1643 = fmul fast float %1434, 0x3FD3333340000000
  %1644 = fmul fast float %1437, 0x3FD3333340000000
  %1645 = fmul fast float %1436, 0x3FD3333340000000
  %1646 = fmul fast float %1644, %1445
  %1647 = fmul fast float %1645, %1445
  %1648 = fmul fast float %1642, %1445
  %1649 = fmul fast float %1643, %1445
  %1650 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1651 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1652 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1650, %dx.types.Handle %1651, float %1640, float %1641, float undef, float undef, i32 0, i32 0, i32 undef, float %1648, float %1649, float undef, float %1646, float %1647, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1653 = extractvalue %dx.types.ResRet.f32 %1652, 0
  %1654 = fadd fast float %1653, 5.000000e-01
  %1655 = fmul fast float %1439, 0x3FC3333340000000
  %1656 = fmul fast float %1438, 0x3FC3333340000000
  %1657 = fmul fast float %1435, 0x3FC3333340000000
  %1658 = fmul fast float %1434, 0x3FC3333340000000
  %1659 = fmul fast float %1437, 0x3FC3333340000000
  %1660 = fmul fast float %1436, 0x3FC3333340000000
  %1661 = fmul fast float %1659, %1445
  %1662 = fmul fast float %1660, %1445
  %1663 = fmul fast float %1657, %1445
  %1664 = fmul fast float %1658, %1445
  %1665 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1650, %dx.types.Handle %1651, float %1655, float %1656, float undef, float undef, i32 0, i32 0, i32 undef, float %1663, float %1664, float undef, float %1661, float %1662, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1666 = extractvalue %dx.types.ResRet.f32 %1665, 0
  %1667 = fadd fast float %1666, 5.000000e-01
  %1668 = fmul fast float %1439, 0x3F789374C0000000
  %1669 = fmul fast float %1438, 0x3F789374C0000000
  %1670 = fmul fast float %1435, 0x3F789374C0000000
  %1671 = fmul fast float %1434, 0x3F789374C0000000
  %1672 = fmul fast float %1437, 0x3F789374C0000000
  %1673 = fmul fast float %1436, 0x3F789374C0000000
  %1674 = fmul fast float %1672, %1445
  %1675 = fmul fast float %1673, %1445
  %1676 = fmul fast float %1670, %1445
  %1677 = fmul fast float %1671, %1445
  %1678 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1650, %dx.types.Handle %1651, float %1668, float %1669, float undef, float undef, i32 0, i32 0, i32 undef, float %1676, float %1677, float undef, float %1674, float %1675, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1679 = extractvalue %dx.types.ResRet.f32 %1678, 0
  %1680 = fadd fast float %1679, 5.000000e-01
  %1681 = fmul fast float %1667, %1654
  %1682 = fmul fast float %1681, %1680
  %1683 = fmul fast float %1682, 5.000000e-01
  %1684 = fadd fast float %1683, 5.000000e-01
  %1685 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1687 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1685, %dx.types.Handle %1686, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1688 = extractvalue %dx.types.ResRet.f32 %1687, 0
  %1689 = extractvalue %dx.types.ResRet.f32 %1687, 1
  %1690 = extractvalue %dx.types.ResRet.f32 %1687, 2
  %1691 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1692 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1693 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1691, %dx.types.Handle %1692, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1694 = extractvalue %dx.types.ResRet.f32 %1693, 0
  %1695 = extractvalue %dx.types.ResRet.f32 %1693, 1
  %1696 = extractvalue %dx.types.ResRet.f32 %1693, 2
  %1697 = fsub fast float %1694, %1688
  %1698 = fsub fast float %1695, %1689
  %1699 = fsub fast float %1696, %1690
  %1700 = fmul fast float %1697, %1510
  %1701 = fmul fast float %1698, %1510
  %1702 = fmul fast float %1699, %1510
  %1703 = fadd fast float %1700, %1688
  %1704 = fadd fast float %1701, %1689
  %1705 = fadd fast float %1702, %1690
  %1706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1707 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1708 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1706, %dx.types.Handle %1707, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1709 = extractvalue %dx.types.ResRet.f32 %1708, 0
  %1710 = extractvalue %dx.types.ResRet.f32 %1708, 1
  %1711 = extractvalue %dx.types.ResRet.f32 %1708, 2
  %1712 = fsub fast float %1709, %1703
  %1713 = fsub fast float %1710, %1704
  %1714 = fsub fast float %1711, %1705
  %1715 = fmul fast float %1712, %1511
  %1716 = fmul fast float %1713, %1511
  %1717 = fmul fast float %1714, %1511
  %1718 = fadd fast float %1715, %1703
  %1719 = fadd fast float %1716, %1704
  %1720 = fadd fast float %1717, %1705
  %1721 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1722 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1723 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1721, %dx.types.Handle %1722, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1724 = extractvalue %dx.types.ResRet.f32 %1723, 0
  %1725 = extractvalue %dx.types.ResRet.f32 %1723, 1
  %1726 = extractvalue %dx.types.ResRet.f32 %1723, 2
  %1727 = fsub fast float %1724, %1718
  %1728 = fsub fast float %1725, %1719
  %1729 = fsub fast float %1726, %1720
  %1730 = fmul fast float %1727, %1512
  %1731 = fmul fast float %1728, %1512
  %1732 = fmul fast float %1729, %1512
  %1733 = fadd fast float %1730, %1718
  %1734 = fadd fast float %1731, %1719
  %1735 = fadd fast float %1732, %1720
  %1736 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1737 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1738 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1736, %dx.types.Handle %1737, float %1471, float %1472, float undef, float undef, i32 0, i32 0, i32 undef, float %1479, float %1480, float undef, float %1477, float %1478, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1739 = extractvalue %dx.types.ResRet.f32 %1738, 0
  %1740 = extractvalue %dx.types.ResRet.f32 %1738, 1
  %1741 = extractvalue %dx.types.ResRet.f32 %1738, 2
  %1742 = fsub fast float %1739, %1733
  %1743 = fsub fast float %1740, %1734
  %1744 = fsub fast float %1741, %1735
  %1745 = fmul fast float %1742, %1513
  %1746 = fmul fast float %1743, %1513
  %1747 = fmul fast float %1744, %1513
  %1748 = fadd fast float %1745, %1733
  %1749 = fadd fast float %1746, %1734
  %1750 = fadd fast float %1747, %1735
  %1751 = fmul fast float %1748, %1684
  %1752 = fmul fast float %1749, %1684
  %1753 = fmul fast float %1750, %1684
  %1754 = call float @dx.op.unary.f32(i32 7, float %1751)  ; Saturate(value)
  %1755 = call float @dx.op.unary.f32(i32 7, float %1752)  ; Saturate(value)
  %1756 = call float @dx.op.unary.f32(i32 7, float %1753)  ; Saturate(value)
  %1757 = fmul fast float %77, 0x3FEE666660000000
  %1758 = fadd fast float %1757, %76
  %1759 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1760 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1759, i32 %1433, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1761 = extractvalue %dx.types.ResRet.f32 %1760, 0
  %1762 = bitcast float %1761 to i32
  %1763 = and i32 %1762, 8
  %1764 = icmp ne i32 %1763, 0
  %1765 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 196)  ; CBufferLoadLegacy(handle,regIndex)
  %1766 = extractvalue %dx.types.CBufRet.f32 %1765, 3
  %1767 = fcmp fast ogt float %1766, 0.000000e+00
  %1768 = and i1 %1767, %1764
  br i1 %1768, label %1769, label %1823, !dx.controlflow.hints !82

; <label>:1769                                    ; preds = %1412
  %1770 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1771 = extractvalue %dx.types.CBufRet.f32 %1770, 2
  %1772 = extractvalue %dx.types.CBufRet.f32 %1770, 3
  %1773 = fmul fast float %1771, %49
  %1774 = fmul fast float %1772, %50
  %1775 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1776 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1777 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1775, %dx.types.Handle %1776, float %1773, float %1774, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1778 = extractvalue %dx.types.ResRet.f32 %1777, 0
  %1779 = extractvalue %dx.types.ResRet.f32 %1777, 1
  %1780 = extractvalue %dx.types.ResRet.f32 %1777, 2
  %1781 = extractvalue %dx.types.ResRet.f32 %1777, 3
  %1782 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1783 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1784 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1782, %dx.types.Handle %1783, float %1773, float %1774, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1785 = extractvalue %dx.types.ResRet.f32 %1784, 0
  %1786 = extractvalue %dx.types.ResRet.f32 %1784, 1
  %1787 = extractvalue %dx.types.ResRet.f32 %1784, 2
  %1788 = extractvalue %dx.types.ResRet.f32 %1784, 3
  %1789 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1790 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1791 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1789, %dx.types.Handle %1790, float %1773, float %1774, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1792 = extractvalue %dx.types.ResRet.f32 %1791, 0
  %1793 = extractvalue %dx.types.ResRet.f32 %1791, 1
  %1794 = extractvalue %dx.types.ResRet.f32 %1791, 2
  %1795 = extractvalue %dx.types.ResRet.f32 %1791, 3
  %1796 = fmul fast float %1785, 2.000000e+00
  %1797 = fmul fast float %1786, 2.000000e+00
  %1798 = fmul fast float %1787, 2.000000e+00
  %1799 = fadd fast float %1796, 0xBFF0101020000000
  %1800 = fadd fast float %1797, 0xBFF0101020000000
  %1801 = fadd fast float %1798, 0xBFF0101020000000
  %1802 = fmul fast float %1781, %1754
  %1803 = fmul fast float %1781, %1755
  %1804 = fmul fast float %1781, %1756
  %1805 = fadd fast float %1802, %1778
  %1806 = fadd fast float %1803, %1779
  %1807 = fadd fast float %1804, %1780
  %1808 = fmul fast float %1788, %1629
  %1809 = fmul fast float %1788, %1630
  %1810 = fmul fast float %1788, %1631
  %1811 = fadd fast float %1799, %1808
  %1812 = fadd fast float %1800, %1809
  %1813 = fadd fast float %1801, %1810
  %1814 = call float @dx.op.dot3.f32(i32 55, float %1811, float %1812, float %1813, float %1811, float %1812, float %1813)  ; Dot3(ax,ay,az,bx,by,bz)
  %1815 = call float @dx.op.unary.f32(i32 25, float %1814)  ; Rsqrt(value)
  %1816 = fmul fast float %1815, %1811
  %1817 = fmul fast float %1815, %1812
  %1818 = fmul fast float %1815, %1813
  %1819 = fmul fast float %1795, %1758
  %1820 = fadd fast float %1819, %1794
  %1821 = fmul fast float %1795, 0x3F847AE140000000
  %1822 = fadd fast float %1821, %1793
  br label %1823

; <label>:1823                                    ; preds = %1769, %1412
  %1824 = phi float [ %1816, %1769 ], [ %1629, %1412 ]
  %1825 = phi float [ %1817, %1769 ], [ %1630, %1412 ]
  %1826 = phi float [ %1818, %1769 ], [ %1631, %1412 ]
  %1827 = phi float [ %1805, %1769 ], [ %1754, %1412 ]
  %1828 = phi float [ %1806, %1769 ], [ %1755, %1412 ]
  %1829 = phi float [ %1807, %1769 ], [ %1756, %1412 ]
  %1830 = phi float [ %1792, %1769 ], [ 0.000000e+00, %1412 ]
  %1831 = phi float [ %1822, %1769 ], [ 0x3F847AE140000000, %1412 ]
  %1832 = phi float [ %1820, %1769 ], [ %1758, %1412 ]
  %1833 = and i32 %1762, 256
  %1834 = icmp ne i32 %1833, 0
  %1835 = and i32 %1762, 512
  %1836 = icmp ne i32 %1835, 0
  %1837 = select i1 %1836, float 1.000000e+00, float 0.000000e+00
  %1838 = select i1 %1834, float 2.000000e+00, float 0.000000e+00
  %1839 = fadd fast float %1838, %1837
  %1840 = fmul fast float %1839, 0x3FD5555560000000
  %1841 = and i32 %1762, 2
  %1842 = icmp ne i32 %1841, 0
  %1843 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1844 = extractvalue %dx.types.CBufRet.f32 %1843, 3
  %1845 = fcmp fast ogt float %1844, 0.000000e+00
  %1846 = and i1 %1845, %1842
  br i1 %1846, label %1847, label %1850

; <label>:1847                                    ; preds = %1823
  %1848 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1849 = extractvalue %dx.types.CBufRet.f32 %1848, 0
  br label %1850

; <label>:1850                                    ; preds = %1847, %1823
  %1851 = phi float [ %1849, %1847 ], [ 1.000000e+00, %1823 ]
  %1852 = and i32 %1762, 4
  %1853 = icmp eq i32 %1852, 0
  br i1 %1853, label %1931, label %1854, !dx.controlflow.hints !83

; <label>:1854                                    ; preds = %1850
  %1855 = fmul fast float %52, 2.097152e+06
  %1856 = fmul fast float %53, 2.097152e+06
  %1857 = fmul fast float %54, 2.097152e+06
  %1858 = fadd fast float %1440, %1855
  %1859 = fadd fast float %1441, %1856
  %1860 = fadd fast float %1442, %1857
  %1861 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1862 = extractvalue %dx.types.CBufRet.f32 %1861, 0
  %1863 = extractvalue %dx.types.CBufRet.f32 %1861, 1
  %1864 = extractvalue %dx.types.CBufRet.f32 %1861, 2
  %1865 = fmul fast float %1862, %1858
  %1866 = fmul fast float %1863, %1859
  %1867 = fmul fast float %1864, %1860
  %1868 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1869 = extractvalue %dx.types.CBufRet.f32 %1868, 0
  %1870 = extractvalue %dx.types.CBufRet.f32 %1868, 1
  %1871 = extractvalue %dx.types.CBufRet.f32 %1868, 2
  %1872 = fadd fast float %1865, %1869
  %1873 = fadd fast float %1866, %1870
  %1874 = fadd fast float %1867, %1871
  %1875 = call float @dx.op.binary.f32(i32 35, float %1872, float 0.000000e+00)  ; FMax(a,b)
  %1876 = call float @dx.op.binary.f32(i32 35, float %1873, float 0.000000e+00)  ; FMax(a,b)
  %1877 = call float @dx.op.binary.f32(i32 35, float %1874, float 0.000000e+00)  ; FMax(a,b)
  %1878 = call float @dx.op.binary.f32(i32 36, float %1875, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1879 = call float @dx.op.binary.f32(i32 36, float %1876, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1880 = call float @dx.op.binary.f32(i32 36, float %1877, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1881 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1882 = extractvalue %dx.types.CBufRet.f32 %1881, 0
  %1883 = extractvalue %dx.types.CBufRet.f32 %1881, 1
  %1884 = extractvalue %dx.types.CBufRet.f32 %1881, 2
  %1885 = fmul fast float %1882, %1878
  %1886 = fmul fast float %1883, %1879
  %1887 = fmul fast float %1884, %1880
  %1888 = fptosi float %1885 to i32
  %1889 = fptosi float %1886 to i32
  %1890 = fptosi float %1887 to i32
  %1891 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1892 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1891, i32 0, i32 %1888, i32 %1889, i32 %1890, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1893 = extractvalue %dx.types.ResRet.i32 %1892, 0
  %1894 = extractvalue %dx.types.ResRet.i32 %1892, 1
  %1895 = extractvalue %dx.types.ResRet.i32 %1892, 2
  %1896 = extractvalue %dx.types.ResRet.i32 %1892, 3
  %1897 = uitofp i32 %1893 to float
  %1898 = uitofp i32 %1894 to float
  %1899 = uitofp i32 %1895 to float
  %1900 = uitofp i32 %1896 to float
  %1901 = extractvalue %dx.types.CBufRet.f32 %1881, 3
  %1902 = fadd fast float %1901, 1.000000e+00
  %1903 = fmul fast float %1902, %1897
  %1904 = fmul fast float %1902, %1898
  %1905 = fmul fast float %1902, %1899
  %1906 = fdiv fast float %1885, %1900
  %1907 = fdiv fast float %1886, %1900
  %1908 = fdiv fast float %1887, %1900
  %1909 = call float @dx.op.unary.f32(i32 22, float %1906)  ; Frc(value)
  %1910 = call float @dx.op.unary.f32(i32 22, float %1907)  ; Frc(value)
  %1911 = call float @dx.op.unary.f32(i32 22, float %1908)  ; Frc(value)
  %1912 = fmul fast float %1901, %1909
  %1913 = fmul fast float %1901, %1910
  %1914 = fmul fast float %1901, %1911
  %1915 = fadd fast float %1903, 5.000000e-01
  %1916 = fadd fast float %1915, %1912
  %1917 = fadd fast float %1904, 5.000000e-01
  %1918 = fadd fast float %1917, %1913
  %1919 = fadd fast float %1905, 5.000000e-01
  %1920 = fadd fast float %1919, %1914
  %1921 = extractvalue %dx.types.CBufRet.f32 %1843, 0
  %1922 = extractvalue %dx.types.CBufRet.f32 %1843, 1
  %1923 = extractvalue %dx.types.CBufRet.f32 %1843, 2
  %1924 = fmul fast float %1916, %1921
  %1925 = fmul fast float %1918, %1922
  %1926 = fmul fast float %1920, %1923
  %1927 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1928 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1929 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1927, %dx.types.Handle %1928, float %1924, float %1925, float %1926, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1930 = extractvalue %dx.types.ResRet.f32 %1929, 0
  br label %1931

; <label>:1931                                    ; preds = %1854, %1850
  %1932 = phi float [ %1930, %1854 ], [ %1851, %1850 ]
  %1933 = and i32 %1762, 32
  %1934 = icmp eq i32 %1933, 0
  br i1 %1934, label %1982, label %1935, !dx.controlflow.hints !84

; <label>:1935                                    ; preds = %1931
  %1936 = fdiv fast float %1413, %1416
  %1937 = fdiv fast float %1414, %1416
  %1938 = fsub fast float %1936, %60
  %1939 = fsub fast float %1937, %61
  %1940 = fdiv fast float %1417, %1420
  %1941 = fdiv fast float %1418, %1420
  %1942 = fsub fast float %1940, %62
  %1943 = fsub fast float %1941, %63
  %1944 = fdiv fast float %1415, %1416
  %1945 = fdiv fast float %1419, %1420
  %1946 = fsub fast float %1938, %1942
  %1947 = fsub fast float %1939, %1943
  %1948 = fsub fast float %1944, %1945
  %1949 = fcmp fast ogt float %1946, 0.000000e+00
  %1950 = fcmp fast ogt float %1947, 0.000000e+00
  %1951 = fcmp fast olt float %1946, 0.000000e+00
  %1952 = fcmp fast olt float %1947, 0.000000e+00
  %1953 = zext i1 %1949 to i32
  %1954 = zext i1 %1950 to i32
  %1955 = zext i1 %1951 to i32
  %1956 = zext i1 %1952 to i32
  %1957 = sub nsw i32 %1953, %1955
  %1958 = sub nsw i32 %1954, %1956
  %1959 = sitofp i32 %1957 to float
  %1960 = sitofp i32 %1958 to float
  %1961 = call float @dx.op.unary.f32(i32 6, float %1946)  ; FAbs(value)
  %1962 = call float @dx.op.unary.f32(i32 6, float %1947)  ; FAbs(value)
  %1963 = call float @dx.op.unary.f32(i32 24, float %1961)  ; Sqrt(value)
  %1964 = call float @dx.op.unary.f32(i32 24, float %1962)  ; Sqrt(value)
  %1965 = fmul fast float %1963, 0x3FD69508A0000000
  %1966 = fmul fast float %1965, %1959
  %1967 = fmul fast float %1964, 0x3FD69508A0000000
  %1968 = fmul fast float %1967, %1960
  %1969 = fadd fast float %1966, 0x3FDFFFE000000000
  %1970 = fadd fast float %1968, 0x3FDFFFE000000000
  %1971 = bitcast float %1948 to i32
  %1972 = lshr i32 %1971, 16
  %1973 = uitofp i32 %1972 to float
  %1974 = fmul fast float %1973, 0x3EF0001000000000
  %1975 = fadd fast float %1974, 0x3EB999B340000000
  %1976 = call float @dx.op.unary.f32(i32 7, float %1975)  ; Saturate(value)
  %1977 = and i32 %1971, 65535
  %1978 = uitofp i32 %1977 to float
  %1979 = fmul fast float %1978, 0x3EF0001000000000
  %1980 = fadd fast float %1979, 0x3EB999B340000000
  %1981 = call float @dx.op.unary.f32(i32 7, float %1980)  ; Saturate(value)
  br label %1982

; <label>:1982                                    ; preds = %1935, %1931
  %1983 = phi float [ %1969, %1935 ], [ 0.000000e+00, %1931 ]
  %1984 = phi float [ %1970, %1935 ], [ 0.000000e+00, %1931 ]
  %1985 = phi float [ %1976, %1935 ], [ 0.000000e+00, %1931 ]
  %1986 = phi float [ %1981, %1935 ], [ 0.000000e+00, %1931 ]
  %1987 = fmul fast float %1831, 0x3FB47AE140000000
  %1988 = fsub fast float %1827, %1987
  %1989 = fsub fast float %1828, %1987
  %1990 = fsub fast float %1829, %1987
  %1991 = fmul fast float %1988, %1830
  %1992 = fmul fast float %1989, %1830
  %1993 = fmul fast float %1990, %1830
  %1994 = fadd fast float %1991, %1987
  %1995 = fadd fast float %1992, %1987
  %1996 = fadd fast float %1993, %1987
  %1997 = fmul fast float %1830, %1827
  %1998 = fmul fast float %1830, %1828
  %1999 = fmul fast float %1830, %1829
  %2000 = fsub fast float %1827, %1997
  %2001 = fsub fast float %1828, %1998
  %2002 = fsub fast float %1829, %1999
  %2003 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %2004 = extractvalue %dx.types.CBufRet.f32 %2003, 3
  %2005 = fmul fast float %2004, %2000
  %2006 = fmul fast float %2004, %2001
  %2007 = fmul fast float %2004, %2002
  %2008 = extractvalue %dx.types.CBufRet.f32 %2003, 0
  %2009 = extractvalue %dx.types.CBufRet.f32 %2003, 1
  %2010 = extractvalue %dx.types.CBufRet.f32 %2003, 2
  %2011 = fadd fast float %2005, %2008
  %2012 = fadd fast float %2006, %2009
  %2013 = fadd fast float %2007, %2010
  %2014 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %2015 = extractvalue %dx.types.CBufRet.f32 %2014, 3
  %2016 = fmul fast float %2015, %1994
  %2017 = fmul fast float %2015, %1995
  %2018 = fmul fast float %2015, %1996
  %2019 = extractvalue %dx.types.CBufRet.f32 %2014, 0
  %2020 = extractvalue %dx.types.CBufRet.f32 %2014, 1
  %2021 = extractvalue %dx.types.CBufRet.f32 %2014, 2
  %2022 = fadd fast float %2016, %2019
  %2023 = fadd fast float %2017, %2020
  %2024 = fadd fast float %2018, %2021
  %2025 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %2026 = extractvalue %dx.types.CBufRet.f32 %2025, 3
  %2027 = fcmp fast une float %2026, 0.000000e+00
  %2028 = fmul fast float %2022, 0x3FDCCCCCC0000000
  %2029 = fmul fast float %2023, 0x3FDCCCCCC0000000
  %2030 = fmul fast float %2024, 0x3FDCCCCCC0000000
  %2031 = fadd fast float %2028, %2011
  %2032 = fadd fast float %2029, %2012
  %2033 = fadd fast float %2030, %2013
  %2034 = select i1 %2027, float %2031, float %2011
  %2035 = select i1 %2027, float %2032, float %2012
  %2036 = select i1 %2027, float %2033, float %2013
  %2037 = select i1 %2027, float 0.000000e+00, float %2022
  %2038 = select i1 %2027, float 0.000000e+00, float %2023
  %2039 = select i1 %2027, float 0.000000e+00, float %2024
  %2040 = call float @dx.op.dot3.f32(i32 55, float %2037, float %2038, float %2039, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2041 = fmul fast float %2040, 0x3F40600000000000
  %2042 = fadd fast float %2041, 0x3FEFFCB940000000
  %2043 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2042)  ; FMax(a,b)
  br i1 %1845, label %2044, label %2113

; <label>:2044                                    ; preds = %1982
  %2045 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2046 = extractvalue %dx.types.CBufRet.f32 %2045, 0
  %2047 = extractvalue %dx.types.CBufRet.f32 %2045, 1
  %2048 = extractvalue %dx.types.CBufRet.f32 %2045, 2
  %2049 = extractvalue %dx.types.CBufRet.f32 %2045, 3
  %2050 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2051 = extractvalue %dx.types.CBufRet.f32 %2050, 0
  %2052 = extractvalue %dx.types.CBufRet.f32 %2050, 1
  %2053 = extractvalue %dx.types.CBufRet.f32 %2050, 2
  %2054 = extractvalue %dx.types.CBufRet.f32 %2050, 3
  %2055 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %2056 = extractvalue %dx.types.CBufRet.f32 %2055, 0
  %2057 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2058 = extractvalue %dx.types.CBufRet.f32 %2057, 0
  %2059 = extractvalue %dx.types.CBufRet.f32 %2057, 1
  %2060 = extractvalue %dx.types.CBufRet.f32 %2057, 2
  %2061 = extractvalue %dx.types.CBufRet.f32 %2057, 3
  %2062 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2063 = extractvalue %dx.types.CBufRet.f32 %2062, 0
  %2064 = extractvalue %dx.types.CBufRet.f32 %2062, 1
  %2065 = extractvalue %dx.types.CBufRet.f32 %2062, 2
  %2066 = extractvalue %dx.types.CBufRet.f32 %2062, 3
  %2067 = extractvalue %dx.types.CBufRet.f32 %2055, 1
  %2068 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2069 = extractvalue %dx.types.CBufRet.f32 %2068, 0
  %2070 = extractvalue %dx.types.CBufRet.f32 %2068, 1
  %2071 = extractvalue %dx.types.CBufRet.f32 %2068, 2
  %2072 = extractvalue %dx.types.CBufRet.f32 %2068, 3
  %2073 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %2074 = extractvalue %dx.types.CBufRet.f32 %2073, 0
  %2075 = extractvalue %dx.types.CBufRet.f32 %2073, 1
  %2076 = extractvalue %dx.types.CBufRet.f32 %2073, 2
  %2077 = extractvalue %dx.types.CBufRet.f32 %2073, 3
  %2078 = extractvalue %dx.types.CBufRet.f32 %2055, 2
  %2079 = fmul fast float %1824, %1824
  %2080 = fmul fast float %1825, %1825
  %2081 = fsub fast float %2079, %2080
  %2082 = fmul fast float %1825, 0xBFF05F8CE0000000
  %2083 = fmul fast float %1826, 0x3FF05F8CE0000000
  %2084 = fmul fast float %1824, 0xBFF05F8CE0000000
  %2085 = fmul fast float %1824, 0x3FEB756F20000000
  %2086 = fmul fast float %2085, %1825
  %2087 = fmul fast float %1825, 0xBFEB756F20000000
  %2088 = fmul fast float %2087, %1826
  %2089 = fmul fast float %1826, %1826
  %2090 = fmul fast float %2089, 0x3FE7C7ADC0000000
  %2091 = fadd fast float %2090, 0xBFCFB4E7C0000000
  %2092 = fmul fast float %1824, 0xBFEB756F20000000
  %2093 = fmul fast float %2092, %1826
  %2094 = fmul fast float %2081, 0x3FDB756F20000000
  %2095 = call float @dx.op.dot4.f32(i32 56, float %2046, float %2047, float %2048, float %2049, float 0x3FEC5BF9E0000000, float %2082, float %2083, float %2084)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2096 = call float @dx.op.dot4.f32(i32 56, float %2051, float %2052, float %2053, float %2054, float %2086, float %2088, float %2091, float %2093)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2097 = fmul fast float %2056, %2094
  %2098 = fadd fast float %2095, %2097
  %2099 = fadd fast float %2098, %2096
  %2100 = call float @dx.op.dot4.f32(i32 56, float %2058, float %2059, float %2060, float %2061, float 0x3FEC5BF9E0000000, float %2082, float %2083, float %2084)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2101 = call float @dx.op.dot4.f32(i32 56, float %2063, float %2064, float %2065, float %2066, float %2086, float %2088, float %2091, float %2093)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2102 = fmul fast float %2067, %2094
  %2103 = fadd fast float %2100, %2102
  %2104 = fadd fast float %2103, %2101
  %2105 = call float @dx.op.dot4.f32(i32 56, float %2069, float %2070, float %2071, float %2072, float 0x3FEC5BF9E0000000, float %2082, float %2083, float %2084)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2106 = call float @dx.op.dot4.f32(i32 56, float %2074, float %2075, float %2076, float %2077, float %2086, float %2088, float %2091, float %2093)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2107 = fmul fast float %2078, %2094
  %2108 = fadd fast float %2105, %2107
  %2109 = fadd fast float %2108, %2106
  %2110 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2099)  ; FMax(a,b)
  %2111 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2104)  ; FMax(a,b)
  %2112 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2109)  ; FMax(a,b)
  br label %2113

; <label>:2113                                    ; preds = %2044, %1982
  %2114 = phi float [ %2110, %2044 ], [ 0.000000e+00, %1982 ]
  %2115 = phi float [ %2111, %2044 ], [ 0.000000e+00, %1982 ]
  %2116 = phi float [ %2112, %2044 ], [ 0.000000e+00, %1982 ]
  %2117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2118 = extractvalue %dx.types.CBufRet.f32 %2117, 0
  %2119 = extractvalue %dx.types.CBufRet.f32 %2117, 1
  %2120 = extractvalue %dx.types.CBufRet.f32 %2117, 2
  %2121 = fmul fast float %2118, %2114
  %2122 = fmul fast float %2119, %2115
  %2123 = fmul fast float %2120, %2116
  %2124 = call float @dx.op.dot3.f32(i32 55, float %2121, float %2122, float %2123, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2125 = fmul fast float %2121, %2034
  %2126 = fmul fast float %2122, %2035
  %2127 = fmul fast float %2123, %2036
  %2128 = fmul fast float %1827, 0x3F40600000000000
  %2129 = fadd fast float %2128, 0x3FEFFCB940000000
  %2130 = fmul fast float %1828, 0x3F40600000000000
  %2131 = fadd fast float %2130, 0x3FEFFCB940000000
  %2132 = fmul fast float %1829, 0x3F40600000000000
  %2133 = fadd fast float %2132, 0x3FEFFCB940000000
  %2134 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2129)  ; FMax(a,b)
  %2135 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2131)  ; FMax(a,b)
  %2136 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2133)  ; FMax(a,b)
  %2137 = fmul fast float %2125, %2134
  %2138 = fmul fast float %2126, %2135
  %2139 = fmul fast float %2127, %2136
  %2140 = fmul fast float %2037, 0x3FDCCCCCC0000000
  %2141 = fmul fast float %2038, 0x3FDCCCCCC0000000
  %2142 = fmul fast float %2039, 0x3FDCCCCCC0000000
  %2143 = fadd fast float %2034, %2140
  %2144 = fadd fast float %2035, %2141
  %2145 = fadd fast float %2036, %2142
  %2146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 146)  ; CBufferLoadLegacy(handle,regIndex)
  %2147 = extractvalue %dx.types.CBufRet.f32 %2146, 1
  %2148 = fmul fast float %2147, %2143
  %2149 = fmul fast float %2147, %2144
  %2150 = fmul fast float %2147, %2145
  %2151 = call float @dx.op.binary.f32(i32 35, float %1637, float 0.000000e+00)  ; FMax(a,b)
  %2152 = call float @dx.op.binary.f32(i32 35, float %1638, float 0.000000e+00)  ; FMax(a,b)
  %2153 = call float @dx.op.binary.f32(i32 35, float %1639, float 0.000000e+00)  ; FMax(a,b)
  %2154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2155 = extractvalue %dx.types.CBufRet.f32 %2154, 0
  %2156 = fcmp fast ogt float %2155, 0.000000e+00
  br i1 %2156, label %2157, label %2224, !dx.controlflow.hints !85

; <label>:2157                                    ; preds = %2113
  %2158 = add nsw i32 %1433, 1
  %2159 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1759, i32 %2158, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2160 = extractvalue %dx.types.ResRet.f32 %2159, 0
  %2161 = extractvalue %dx.types.ResRet.f32 %2159, 1
  %2162 = extractvalue %dx.types.ResRet.f32 %2159, 2
  %2163 = add nsw i32 %1433, 18
  %2164 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1759, i32 %2163, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2165 = extractvalue %dx.types.ResRet.f32 %2164, 0
  %2166 = extractvalue %dx.types.ResRet.f32 %2164, 1
  %2167 = extractvalue %dx.types.ResRet.f32 %2164, 2
  %2168 = add nsw i32 %1433, 17
  %2169 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1759, i32 %2168, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2170 = extractvalue %dx.types.ResRet.f32 %2169, 3
  %2171 = add nsw i32 %1433, 24
  %2172 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1759, i32 %2171, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2173 = extractvalue %dx.types.ResRet.f32 %2172, 3
  %2174 = add nsw i32 %1433, 25
  %2175 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1759, i32 %2174, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2176 = extractvalue %dx.types.ResRet.f32 %2175, 3
  %2177 = add nsw i32 %1433, 31
  %2178 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1759, i32 %2177, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2179 = extractvalue %dx.types.ResRet.f32 %2178, 0
  %2180 = fsub fast float %52, %2160
  %2181 = fsub fast float %53, %2161
  %2182 = fsub fast float %54, %2162
  %2183 = fmul fast float %2180, 2.097152e+06
  %2184 = fmul fast float %2181, 2.097152e+06
  %2185 = fmul fast float %2182, 2.097152e+06
  %2186 = fadd fast float %2183, %1440
  %2187 = fsub fast float %2186, %2165
  %2188 = fadd fast float %2184, %1441
  %2189 = fsub fast float %2188, %2166
  %2190 = fadd fast float %2185, %1442
  %2191 = fsub fast float %2190, %2167
  %2192 = call float @dx.op.unary.f32(i32 6, float %2187)  ; FAbs(value)
  %2193 = call float @dx.op.unary.f32(i32 6, float %2189)  ; FAbs(value)
  %2194 = call float @dx.op.unary.f32(i32 6, float %2191)  ; FAbs(value)
  %2195 = fadd fast float %2170, 1.000000e+00
  %2196 = fadd fast float %2173, 1.000000e+00
  %2197 = fadd fast float %2176, 1.000000e+00
  %2198 = fcmp fast ogt float %2192, %2195
  %2199 = fcmp fast ogt float %2193, %2196
  %2200 = fcmp fast ogt float %2194, %2197
  %2201 = or i1 %2198, %2199
  %2202 = or i1 %2201, %2200
  br i1 %2202, label %2203, label %2216

; <label>:2203                                    ; preds = %2157
  %2204 = fadd fast float %1441, %1440
  %2205 = fadd fast float %52, %53
  %2206 = fadd fast float %2204, %1442
  %2207 = fadd fast float %2205, %54
  %2208 = fmul fast float %2206, 0x3F52E83A20000000
  %2209 = fmul fast float %2207, 0x40A2E83A20000000
  %2210 = call float @dx.op.unary.f32(i32 22, float %2209)  ; Frc(value)
  %2211 = fadd fast float %2210, %2208
  %2212 = call float @dx.op.unary.f32(i32 22, float %2211)  ; Frc(value)
  %2213 = fcmp fast ogt float %2212, 5.000000e-01
  %2214 = uitofp i1 %2213 to float
  %2215 = fsub fast float 1.000000e+00, %2214
  br label %2224

; <label>:2216                                    ; preds = %2157
  %2217 = fcmp fast ogt float %2179, 0.000000e+00
  br i1 %2217, label %2218, label %2224

; <label>:2218                                    ; preds = %2216
  %2219 = fsub fast float -0.000000e+00, %2179
  %2220 = call float @dx.op.unary.f32(i32 6, float %2219)  ; FAbs(value)
  %2221 = fmul fast float %2220, 2.000000e+01
  %2222 = call float @dx.op.unary.f32(i32 7, float %2221)  ; Saturate(value)
  %2223 = fsub fast float 1.000000e+00, %2222
  br label %2224

; <label>:2224                                    ; preds = %2218, %2216, %2203, %2113
  %2225 = phi float [ %2215, %2203 ], [ %2223, %2218 ], [ %2151, %2216 ], [ %2151, %2113 ]
  %2226 = phi float [ 1.000000e+00, %2203 ], [ 0.000000e+00, %2218 ], [ %2152, %2216 ], [ %2152, %2113 ]
  %2227 = phi float [ %2214, %2203 ], [ %2223, %2218 ], [ %2153, %2216 ], [ %2153, %2113 ]
  %2228 = fadd fast float %2148, %2137
  %2229 = fadd fast float %2149, %2138
  %2230 = fadd fast float %2150, %2139
  %2231 = fadd fast float %2228, %2225
  %2232 = fadd fast float %2229, %2226
  %2233 = fadd fast float %2230, %2227
  %2234 = fmul fast float %49, 7.812500e-03
  %2235 = fmul fast float %50, 7.812500e-03
  %2236 = call float @dx.op.unary.f32(i32 22, float %2234)  ; Frc(value)
  %2237 = call float @dx.op.unary.f32(i32 22, float %2235)  ; Frc(value)
  %2238 = fmul fast float %2236, 1.280000e+02
  %2239 = fmul fast float %2237, 1.280000e+02
  %2240 = fadd fast float %2238, 0xC05015CCC0000000
  %2241 = fadd fast float %2239, 0xC0521DCCC0000000
  %2242 = fmul fast float %2240, %2240
  %2243 = fmul fast float %2241, %2241
  %2244 = fmul fast float %2241, %2240
  %2245 = call float @dx.op.dot3.f32(i32 55, float %2242, float %2243, float %2244, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2246 = call float @dx.op.unary.f32(i32 22, float %2245)  ; Frc(value)
  %2247 = fadd fast float %2246, -5.000000e-01
  %2248 = fmul fast float %2124, %2043
  %2249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2250 = extractvalue %dx.types.CBufRet.f32 %2249, 1
  %2251 = fmul fast float %2248, %2250
  %2252 = fadd fast float %2251, 3.906250e-03
  %2253 = call float @dx.op.unary.f32(i32 23, float %2252)  ; Log(value)
  %2254 = fmul fast float %2253, 6.250000e-02
  %2255 = fmul fast float %2247, 0x3F70101020000000
  %2256 = fadd fast float %2255, 5.000000e-01
  %2257 = fadd fast float %2256, %2254
  %2258 = fmul fast float %1824, 5.000000e-01
  %2259 = fmul fast float %1825, 5.000000e-01
  %2260 = fmul fast float %1826, 5.000000e-01
  %2261 = fadd fast float %2258, 5.000000e-01
  %2262 = fadd fast float %2259, 5.000000e-01
  %2263 = fadd fast float %2260, 5.000000e-01
  %2264 = fmul fast float %2250, %2231
  %2265 = fmul fast float %2250, %2232
  %2266 = fmul fast float %2250, %2233
  %2267 = call float @dx.op.binary.f32(i32 36, float %2264, float 3.225600e+04)  ; FMin(a,b)
  %2268 = call float @dx.op.binary.f32(i32 36, float %2265, float 3.225600e+04)  ; FMin(a,b)
  %2269 = call float @dx.op.binary.f32(i32 36, float %2266, float 3.225600e+04)  ; FMin(a,b)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %2267)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %2268)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %2269)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %2261)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %2262)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %2263)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1840)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1830)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1831)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1832)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3F70101020000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1827)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1828)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1829)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %2257)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1983)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %1984)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %1985)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %1986)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %1932)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!56}
!dx.entryPoints = !{!57}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !33, !38}
!5 = !{!6, !8, !10, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !11}
!11 = !{i32 1, i32 16}
!12 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !11}
!13 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !11}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !9}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !9}
!17 = !{i32 8, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 8, i32 1, i32 11, i32 0, null}
!18 = !{i32 9, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 9, i32 1, i32 11, i32 0, null}
!19 = !{i32 10, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !9}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !9}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!33 = !{!34, !35, !36, !37}
!34 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5388, null}
!35 = !{i32 1, %UniformBufferConstants_IndirectLightingCache* undef, !"", i32 0, i32 1, i32 1, i32 268, null}
!36 = !{i32 2, %UniformBufferConstants_Nanite* undef, !"", i32 0, i32 2, i32 1, i32 180, null}
!37 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 316, null}
!38 = !{!39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55}
!39 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!40 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!41 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!42 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!43 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!44 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!45 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!46 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 7, i32 1, i32 0, null}
!47 = !{i32 8, %struct.SamplerState* undef, !"", i32 0, i32 8, i32 1, i32 0, null}
!48 = !{i32 9, %struct.SamplerState* undef, !"", i32 0, i32 9, i32 1, i32 0, null}
!49 = !{i32 10, %struct.SamplerState* undef, !"", i32 0, i32 10, i32 1, i32 0, null}
!50 = !{i32 11, %struct.SamplerState* undef, !"", i32 0, i32 11, i32 1, i32 0, null}
!51 = !{i32 12, %struct.SamplerState* undef, !"", i32 0, i32 12, i32 1, i32 0, null}
!52 = !{i32 13, %struct.SamplerState* undef, !"", i32 0, i32 13, i32 1, i32 0, null}
!53 = !{i32 14, %struct.SamplerState* undef, !"", i32 0, i32 14, i32 1, i32 0, null}
!54 = !{i32 15, %struct.SamplerState* undef, !"", i32 0, i32 15, i32 1, i32 0, null}
!55 = !{i32 16, %struct.SamplerState* undef, !"", i32 0, i32 16, i32 1, i32 0, null}
!56 = !{[10 x i32] [i32 8, i32 28, i32 0, i32 0, i32 0, i32 0, i32 17823735, i32 17823735, i32 0, i32 0]}
!57 = !{void ()* @MainPS, !"MainPS", !58, !4, !79}
!58 = !{!59, !66, null}
!59 = !{!60, !62, !63, !65}
!60 = !{i32 0, !"PACKED_VIEW_INDEX", i8 5, i8 0, !61, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!61 = !{i32 0}
!62 = !{i32 1, !"MACRO_TILE_INDEX", i8 5, i8 0, !61, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!63 = !{i32 2, !"SV_Position", i8 9, i8 3, !61, i8 4, i32 1, i8 4, i32 1, i8 0, !64}
!64 = !{i32 3, i32 3}
!65 = !{i32 3, !"SV_IsFrontFace", i8 5, i8 13, !61, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!66 = !{!67, !69, !71, !73, !75, !77}
!67 = !{i32 0, !"SV_Target", i8 9, i8 16, !61, i8 0, i32 1, i8 4, i32 0, i8 0, !68}
!68 = !{i32 3, i32 15}
!69 = !{i32 1, !"SV_Target", i8 9, i8 16, !70, i8 0, i32 1, i8 4, i32 1, i8 0, !68}
!70 = !{i32 1}
!71 = !{i32 2, !"SV_Target", i8 9, i8 16, !72, i8 0, i32 1, i8 4, i32 2, i8 0, !68}
!72 = !{i32 2}
!73 = !{i32 3, !"SV_Target", i8 9, i8 16, !74, i8 0, i32 1, i8 4, i32 3, i8 0, !68}
!74 = !{i32 3}
!75 = !{i32 4, !"SV_Target", i8 9, i8 16, !76, i8 0, i32 1, i8 4, i32 4, i8 0, !68}
!76 = !{i32 4}
!77 = !{i32 5, !"SV_Target", i8 9, i8 16, !78, i8 0, i32 1, i8 4, i32 6, i8 0, !68}
!78 = !{i32 6}
!79 = !{i32 0, i64 16, i32 5, !61}
!80 = distinct !{!80, !"dx.controlflow.hints", i32 1}
!81 = distinct !{!81, !"dx.controlflow.hints", i32 1}
!82 = distinct !{!82, !"dx.controlflow.hints", i32 2}
!83 = distinct !{!83, !"dx.controlflow.hints", i32 1}
!84 = distinct !{!84, !"dx.controlflow.hints", i32 1}
!85 = distinct !{!85, !"dx.controlflow.hints", i32 1}
